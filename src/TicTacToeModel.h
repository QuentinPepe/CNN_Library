
#pragma once

#include "ConvolutionalLayer.h"
#include "BatchNorm2d.h"
#include "MaxPoolingLayer.h"
#include "FlattenLayer.h"
#include "LinearLayer.h"
#include "ReLULayer.h"
#include "Tanh.h"
#include "Tensor4D.h"
#include <vector>
#include "SoftMaxLayer.h"

namespace nnm {

    class TicTacToeModel {
    private:
        ConvolutionalLayer conv1;
        BatchNorm2d bn1;
        MaxPoolingLayer pool;
        Flatten flatten;
        LinearLayer fc1;
        LinearLayer fc2;
        LinearLayer fc3;
        SoftMaxLayer softmax;

    public:
        TicTacToeModel() :
                conv1(3, 16, 3, 1, 1),
                bn1(16),
                pool(2, 2, 2),
                flatten(),
                fc1(16 * 1 * 1, 32),
                fc2(32, 9),
                fc3(32, 1),
                softmax(1) {
            // Initialize weights and biases
            std::vector<float> conv1_weights = {-0.085100f, 0.154456f, -0.124030f, 0.133594f, -0.078922f, -0.074393f,
                                                -0.089353f, -0.219227f, -0.147613f, -0.076779f, 0.056862f, 0.057490f,
                                                0.076596f, 0.009373f, 0.058837f, 0.027763f, 0.067095f, 0.004853f,
                                                0.217831f, -0.010826f, 0.114365f, 0.136514f, -0.106822f, 0.062492f,
                                                0.379856f, -0.051925f, 0.190424f, 0.022192f, 0.070801f, 0.127379f,
                                                0.139502f, 0.004013f, -0.001947f, 0.201629f, 0.017099f, -0.154874f,
                                                0.281259f, 0.017956f, 0.199980f, 0.176602f, -0.081157f, -0.004411f,
                                                -0.042486f, 0.036893f, 0.066768f, 0.156420f, -0.014933f, 0.338740f,
                                                0.113507f, 0.220610f, -0.071951f, 0.232009f, 0.023613f, 0.139187f,
                                                0.318930f, -0.223728f, 0.226755f, 0.069576f, 0.150489f, -0.046616f,
                                                0.036828f, -0.022796f, 0.144813f, 0.028047f, 0.005880f, -0.126401f,
                                                -0.097230f, 0.150823f, 0.014990f, 0.276654f, -0.080518f, 0.083704f,
                                                0.335839f, 0.178445f, 0.073583f, -0.004051f, 0.132950f, -0.046499f,
                                                -0.116134f, -0.134682f, -0.064574f, 0.019478f, -0.088714f, 0.024479f,
                                                0.200349f, 0.231815f, 0.183288f, 0.040825f, -0.217951f, -0.021680f,
                                                0.119653f, 0.111793f, 0.085527f, 0.006358f, 0.057659f, -0.202759f,
                                                0.003771f, 0.080617f, 0.022870f, -0.286726f, 0.012873f, -0.156502f,
                                                -0.149593f, -0.230378f, -0.029642f, -0.382966f, -0.056330f, -0.303713f,
                                                0.197798f, 0.101036f, 0.118540f, 0.009610f, 0.058952f, -0.002706f,
                                                0.108640f, -0.068336f, 0.122869f, 0.135746f, -0.116307f, 0.101055f,
                                                0.073133f, -0.074804f, -0.040695f, 0.107245f, 0.062099f, -0.168417f,
                                                0.144108f, -0.058307f, 0.209131f, -0.051113f, -0.210939f, -0.140320f,
                                                0.021482f, -0.398635f, 0.249978f, 0.070957f, 0.026777f, 0.376490f,
                                                0.161617f, -0.009053f, -0.160038f, 0.317081f, -0.055565f, 0.079809f,
                                                0.099780f, 0.094373f, 0.027646f, -0.010319f, 0.077178f, 0.135463f,
                                                0.089305f, 0.114766f, -0.240111f, -0.058455f, -0.022687f, 0.085720f,
                                                0.271728f, -0.035077f, 0.132189f, 0.158248f, 0.245450f, 0.038868f,
                                                0.001110f, 0.169861f, 0.117751f, 0.097118f, 0.068156f, -0.207045f,
                                                0.251184f, -0.164605f, -0.089496f, -0.068674f, -0.096307f, 0.169620f,
                                                0.016090f, -0.099759f, 0.209999f, 0.202995f, 0.103259f, -0.123093f,
                                                0.010782f, 0.003529f, -0.420976f, 0.219546f, -0.079267f, 0.061383f,
                                                -0.276186f, 0.175227f, 0.044629f, 0.094816f, -0.011593f, -0.092428f,
                                                0.014534f, -0.031796f, 0.103899f, 0.241453f, 0.053332f, 0.036325f,
                                                0.101364f, 0.160631f, 0.009578f, -0.135602f, 0.044747f, 0.037134f,
                                                -0.177861f, -0.027688f, -0.030250f, -0.037163f, 0.231406f, 0.025381f,
                                                0.279625f, -0.016385f, 0.075610f, -0.420258f, -0.129250f, 0.067225f,
                                                0.216452f, 0.099780f, 0.213884f, -0.096770f, 0.108474f, 0.123657f,
                                                0.012118f, 0.140637f, 0.017227f, -0.042419f, -0.024838f, 0.208640f,
                                                0.053094f, 0.088227f, 0.178769f, 0.155648f, 0.011012f, 0.116227f,
                                                -0.349527f, -0.070902f, -0.266879f, -0.139204f, -0.019086f, -0.072116f,
                                                -0.076269f, -0.203266f, -0.110818f, -0.115543f, 0.079169f, -0.127400f,
                                                -0.096090f, 0.060064f, 0.032180f, -0.047483f, 0.120739f, -0.155235f,
                                                0.093020f, 0.001433f, 0.121454f, 0.089469f, 0.047773f, 0.064283f,
                                                0.197979f, 0.121945f, -0.046493f, 0.279526f, 0.033507f, 0.342028f,
                                                0.037789f, 0.112520f, 0.166535f, 0.200765f, 0.074613f, 0.134306f,
                                                0.258398f, -0.036069f, 0.289183f, 0.007347f, -0.062587f, 0.044799f,
                                                0.270663f, 0.034769f, 0.082006f, 0.008448f, 0.112008f, -0.010411f,
                                                0.016510f, -0.063427f, 0.096618f, -0.013598f, -0.023560f, 0.011125f,
                                                -0.044409f, 0.055069f, -0.050964f, 0.004356f, -0.137148f, -0.012478f,
                                                0.059237f, -0.101263f, -0.296050f, -0.171349f, -0.021835f, -0.326847f,
                                                0.172445f, 0.159680f, 0.232281f, -0.007661f, -0.119630f, -0.164029f,
                                                0.029257f, -0.021651f, 0.057935f, 0.073316f, 0.095988f, -0.116684f,
                                                0.132918f, -0.101537f, 0.104573f, 0.057598f, 0.304011f, -0.219667f,
                                                0.051708f, -0.037139f, -0.100840f, 0.233755f, 0.232572f, -0.003029f,
                                                0.069590f, 0.094173f, 0.074911f, 0.072760f, 0.220722f, -0.055242f,
                                                -0.040624f, -0.010283f, 0.102928f, 0.323758f, 0.097161f, 0.010282f,
                                                0.009210f, 0.022199f, 0.004463f, -0.027451f, 0.051148f, 0.189020f,
                                                -0.217499f, 0.215204f, 0.103491f, 0.280457f, -0.017791f, 0.064772f,
                                                0.130293f, 0.061572f, -0.113681f, -0.019348f, -0.167824f, -0.234450f,
                                                0.263639f, -0.019094f, -0.174591f, -0.230353f, -0.153881f, 0.195539f,
                                                -0.088098f, -0.079990f, -0.184232f, -0.152231f, 0.005192f, 0.142949f,
                                                -0.124516f, -0.111456f, -0.060766f, -0.135528f, -0.241918f, -0.277433f,
                                                0.181391f, 0.064679f, -0.013302f, 0.314088f, -0.004467f, 0.122729f,
                                                0.048135f, -0.161465f, -0.096636f, -0.034505f, -0.340060f, -0.038036f,
                                                -0.008485f, 0.141915f, -0.109457f, 0.102510f, 0.042380f, 0.047308f,
                                                -0.100209f, 0.057700f, -0.011670f, 0.001447f, -0.033502f, 0.091498f,
                                                0.305734f, 0.008022f, 0.240087f, -0.174400f, 0.065021f, -0.147408f,
                                                0.061438f, 0.113777f, 0.140074f, 0.203909f, 0.115457f, 0.017802f,
                                                -0.090763f, 0.226244f, 0.233060f, 0.218148f, 0.209651f, 0.025602f,
                                                0.113686f, 0.022331f, 0.078019f, 0.148964f, -0.274876f, 0.051503f,
                                                0.059991f, -0.003563f, -0.039784f, 0.125878f, 0.002022f, 0.151482f,
                                                -0.218687f, 0.013432f, 0.094389f, 0.033844f, 0.121925f, -0.119106f};
            std::vector<float> conv1_bias = {-0.050065f, 0.016225f, -0.102852f, -0.042134f, -0.099335f, 0.168340f,
                                             -0.063542f, -0.002280f, -0.115423f, -0.031518f, 0.121578f, -0.104784f,
                                             -0.052955f, 0.198386f, 0.107751f, -0.087487f};
            conv1.set_weights(Tensor4D(16, 3, 3, 3, conv1_weights));
            conv1.set_bias(Tensor4D(1, 16, 1, 1, conv1_bias));

            std::vector<float> bn1_weight = {1.309005f, 1.181051f, 1.476585f, 1.126282f, 1.531653f, 1.626579f,
                                             1.660536f, 1.089547f, 1.102345f, 1.165878f, 1.382982f, 1.495744f,
                                             1.363708f, 1.387182f, 1.259722f, 1.265140f};
            std::vector<float> bn1_bias = {-0.000947f, 0.000393f, 0.123845f, -0.072176f, 0.048818f, -0.033213f,
                                           0.078585f, -0.016852f, -0.003171f, 0.089498f, -0.047474f, 0.007834f,
                                           0.117981f, 0.000577f, 0.044369f, 0.072174f};
            std::vector<float> bn1_running_mean = {0.069764f, 0.362266f, 0.100153f, -0.043033f, -0.102754f, 0.519269f,
                                                   0.033336f, 0.083417f, 0.122893f, 0.319512f, 0.195958f, 0.035037f,
                                                   0.301176f, -0.046293f, 0.112079f, 0.072271f};
            std::vector<float> bn1_running_var = {0.038663f, 0.067911f, 0.051809f, 0.088483f, 0.050797f, 0.062532f,
                                                  0.084364f, 0.068896f, 0.074446f, 0.036531f, 0.028878f, 0.083091f,
                                                  0.060814f, 0.087073f, 0.042069f, 0.079750f};
            bn1.set_parameters(
                    Tensor4D(1, 16, 1, 1, bn1_weight),
                    Tensor4D(1, 16, 1, 1, bn1_bias),
                    Tensor4D(1, 16, 1, 1, bn1_running_mean),
                    Tensor4D(1, 16, 1, 1, bn1_running_var)
            );

            std::vector<float> fc1_weights = {-0.098706f, -0.042609f, 0.108481f, 0.166501f, -0.171901f, 0.566815f,
                                              -0.206453f, -0.156672f, -0.025936f, 0.280419f, 0.334309f, 0.055823f,
                                              0.222345f, -0.217778f, 0.351746f, -0.314646f, -0.241374f, -0.335636f,
                                              -0.242258f, 0.204821f, 0.029614f, 0.245798f, 0.322277f, 0.145727f,
                                              0.133351f, -0.185814f, 0.076409f, 0.032454f, 0.013421f, -0.110766f,
                                              0.052469f, -0.065166f, -0.206834f, 0.107306f, -0.170595f, 0.145045f,
                                              -0.509232f, -0.103440f, -0.002223f, 0.027845f, -0.253635f, 0.047809f,
                                              0.168261f, 0.611234f, 0.210333f, 0.237685f, 0.324591f, 0.110904f,
                                              0.053375f, -0.227112f, -0.098684f, -0.008956f, -0.001341f, -0.119947f,
                                              -0.279431f, -0.065015f, 0.064099f, 0.183639f, -0.257352f, 0.087738f,
                                              -0.268833f, -0.270690f, -0.156561f, -0.064648f, -0.038602f, -0.298133f,
                                              0.308155f, 0.246314f, 0.000647f, 0.314566f, 0.102686f, 0.049113f,
                                              0.106738f, 0.055091f, -0.206331f, -0.310734f, 0.178694f, 0.073316f,
                                              0.337740f, -0.167098f, 0.229685f, -0.269839f, 0.390360f, 0.106769f,
                                              0.122092f, 0.214739f, 0.632828f, 0.197774f, -0.018193f, -0.049971f,
                                              -0.295193f, -0.051295f, 0.148411f, 0.737322f, -0.231665f, -0.651589f,
                                              -0.067968f, -0.018462f, 0.120702f, 0.165395f, 0.363143f, -0.039997f,
                                              0.161871f, 0.189275f, 0.166756f, -0.256510f, 0.266056f, -0.277691f,
                                              -0.138533f, -0.223887f, 0.248070f, -0.145720f, -0.091414f, -0.317619f,
                                              0.178047f, -0.607748f, -0.184553f, -0.270620f, -0.202376f, -0.131810f,
                                              0.162767f, 0.318722f, 0.347334f, 0.150037f, -0.276317f, 0.040562f,
                                              0.039131f, 0.102406f, 0.196542f, 0.157604f, 0.170537f, 0.068105f,
                                              -0.057507f, 0.127082f, 0.089847f, -0.286917f, -0.093549f, 0.014398f,
                                              -0.222082f, 0.193665f, 0.019693f, -0.215290f, 0.333829f, -0.277435f,
                                              0.112173f, 0.299716f, -0.048897f, 0.162363f, 0.324096f, 0.371623f,
                                              -0.316288f, -0.119912f, -0.068938f, 0.219375f, 0.307430f, 0.302492f,
                                              -0.112379f, -0.186980f, -0.150922f, 0.126575f, -0.266765f, -0.176927f,
                                              0.207520f, 0.267837f, 0.408843f, 0.131811f, 0.040128f, 0.070575f,
                                              -0.247921f, -0.083462f, -0.214035f, 0.335110f, -0.107435f, 0.095278f,
                                              -0.263932f, 0.331709f, 0.178313f, 0.246694f, 0.275676f, -0.230598f,
                                              -0.060860f, 0.066460f, 0.282056f, -0.085820f, -0.173824f, -0.201195f,
                                              0.308271f, -0.040955f, -0.106607f, 0.287893f, 0.292834f, -0.071830f,
                                              -0.121682f, 0.367295f, -0.058558f, -0.160955f, -0.248405f, 0.047001f,
                                              -0.256380f, -0.191118f, -0.209308f, 0.134555f, 0.053036f, 0.122667f,
                                              0.316381f, -0.139679f, 0.258673f, 0.515261f, -0.188268f, -0.141604f,
                                              -0.277942f, 0.045835f, 0.049170f, 0.236083f, 0.273999f, 0.084627f,
                                              0.278872f, -0.290109f, 0.252897f, 0.475202f, -0.253360f, -0.088546f,
                                              0.232257f, 0.161472f, -0.190839f, 0.142689f, -0.015849f, 0.064470f,
                                              -0.084877f, 0.132797f, 0.078661f, 0.022480f, 0.090363f, 0.105475f,
                                              0.173670f, -0.052715f, -0.058393f, 0.046862f, -0.146263f, 0.306076f,
                                              -0.166981f, 0.195492f, 0.011644f, 0.168479f, 0.193783f, -0.018609f,
                                              0.023128f, 0.340728f, -0.102003f, -0.092113f, -0.265178f, -0.231501f,
                                              -0.017706f, -0.150422f, 0.152696f, 0.025265f, 0.264044f, -0.076962f,
                                              -0.223058f, 0.147447f, 0.109989f, 0.263545f, -0.038963f, 0.224124f,
                                              -0.058283f, 0.107293f, 0.206139f, -0.380141f, 0.219505f, -0.107504f,
                                              -0.199129f, -0.045789f, 0.593380f, 0.487880f, 0.214331f, -0.103250f,
                                              0.413041f, -0.429863f, -0.679904f, 0.297306f, -0.030392f, 0.296077f,
                                              0.810431f, -0.296368f, 0.117418f, -0.137583f, 0.079725f, 0.621239f,
                                              -0.043754f, 0.278194f, 0.087882f, 0.021620f, -0.055286f, -0.337766f,
                                              0.263479f, 0.367543f, -0.032923f, -0.069574f, -0.310049f, 0.076576f,
                                              0.139419f, 0.423784f, -0.235208f, 0.314081f, 0.469675f, 0.147164f,
                                              0.150937f, -0.083467f, -0.053429f, -0.468520f, 0.088687f, 0.034112f,
                                              -0.055678f, 0.213198f, -0.021703f, 0.240715f, 0.041985f, 0.522615f,
                                              -0.214296f, -0.043179f, -0.588194f, -0.080993f, 0.594182f, -0.156010f,
                                              -0.025874f, -0.137780f, 0.262315f, 0.081235f, 0.148235f, 0.618171f,
                                              -0.809914f, 0.196123f, 0.234503f, 0.034734f, 0.516039f, 0.282152f,
                                              0.027129f, -0.066435f, 0.155501f, 0.198950f, 0.127856f, -0.033550f,
                                              0.057212f, 0.338907f, 0.154908f, -0.023521f, -0.206400f, -0.201732f,
                                              0.222518f, -0.044035f, -0.012493f, 0.149673f, -0.008851f, -0.032851f,
                                              0.031257f, 0.103013f, 0.525612f, 0.316279f, 0.493757f, -0.237046f,
                                              -0.085900f, 0.202600f, -0.195168f, 0.236526f, -0.381470f, 0.256953f,
                                              0.250428f, -0.247407f, 0.219461f, 0.226990f, -0.435627f, 0.291274f,
                                              -0.095546f, -0.207613f, 0.012906f, 0.077698f, 0.197978f, 0.011084f,
                                              -0.502567f, 0.264738f, 0.330963f, 0.251264f, 0.068099f, 0.366515f,
                                              0.135174f, -0.191530f, 0.179422f, -0.288128f, 0.121749f, -0.020149f,
                                              0.332255f, -0.043669f, -0.080704f, 0.163759f, -0.174484f, -0.038592f,
                                              0.010958f, 0.058522f, 0.062657f, 0.200681f, -0.352291f, -0.148622f,
                                              0.299429f, -0.090257f, -0.026460f, 0.236408f, 0.156610f, 0.004164f,
                                              -0.063704f, -0.237039f, 0.158440f, 0.023388f, 0.111032f, -0.209361f,
                                              -0.035689f, 0.205335f, 0.232189f, 0.156457f, 0.118151f, -0.161142f,
                                              -0.032463f, 0.124050f, -0.046557f, -0.218367f, -0.032403f, 0.205169f,
                                              -0.036450f, -0.134654f, -0.152917f, -0.102637f, 0.330829f, -0.387326f,
                                              0.562034f, 0.248982f, -0.033338f, 0.091039f, -0.388466f, 0.217767f,
                                              -0.103541f, 0.125804f, 0.069242f, -0.158276f, 0.378443f, -0.495046f,
                                              0.559095f, 0.325689f, 0.509969f, -0.292136f, -0.268574f, -0.346951f,
                                              0.315622f, -0.090560f, -0.027480f, 0.015070f, 0.083038f, -0.081459f,
                                              0.351578f, -0.274259f, 0.412899f, -0.214821f, -0.112495f, -0.010615f,
                                              0.178950f, -0.089845f, -0.540177f, 0.215994f, 0.394368f, 0.272695f,
                                              0.281548f, 0.281650f, -0.107769f, -0.142698f, -0.369586f, -0.478212f,
                                              0.165412f, 0.375149f, -0.133083f, -0.083357f, -0.053186f, -0.133897f,
                                              -0.052767f, 0.324605f, 0.700843f, 0.328084f, 0.087427f, -0.384078f,
                                              -0.139217f, -0.277366f, -0.104373f, 0.383207f, 0.323980f, -0.204955f,
                                              0.349262f, 0.105392f, 0.004897f, -0.179697f, 0.010606f, 0.169920f,
                                              -0.202870f, -0.288429f, 0.475513f, 0.589258f, 0.082295f, 0.192067f,
                                              -0.066668f, 0.438090f, -0.284636f, -0.417064f, 0.267770f, -0.168063f,
                                              0.174215f, 0.019834f};
            std::vector<float> fc1_bias = {-0.003339f, -0.047420f, 0.094509f, -0.223458f, -0.150960f, 0.042902f,
                                           -0.086658f, 0.058151f, 0.066130f, -0.001330f, 0.217689f, 0.023382f,
                                           0.188176f, 0.038753f, 0.029947f, 0.087806f, 0.139278f, -0.183357f, 0.022734f,
                                           -0.097259f, 0.271406f, 0.199389f, -0.171746f, -0.153338f, 0.215760f,
                                           -0.139996f, 0.161662f, 0.195073f, 0.099731f, 0.123697f, -0.234355f,
                                           0.258632f};
            fc1.set_weights(Tensor4D(1, 32, 16, 1, fc1_weights));
            fc1.set_bias(Tensor4D(1, 32, 1, 1, fc1_bias));

            std::vector<float> fc2_weights = {0.614425f, 0.122935f, 0.459588f, -0.049268f, 0.293937f, -0.632960f,
                                              -1.095218f, -0.923706f, 0.882387f, 0.082922f, -0.210669f, -0.475880f,
                                              0.825049f, 0.141988f, -0.001784f, 0.696262f, 0.523437f, -0.240635f,
                                              -0.571375f, -1.745807f, 0.180556f, 0.067577f, -0.728231f, 0.679254f,
                                              -0.555983f, -0.007304f, 0.336726f, 0.119536f, -1.353092f, -0.171302f,
                                              -0.607426f, 0.602142f, 0.596949f, 0.558606f, 0.744538f, -0.100697f,
                                              -0.165905f, 0.432385f, -0.028525f, -0.982505f, 0.344328f, 0.316186f,
                                              0.140476f, 0.380027f, -0.696530f, 0.822585f, 0.066300f, -1.830291f,
                                              -0.390793f, -0.808847f, -0.805551f, -0.163549f, -1.068125f, -1.123445f,
                                              0.596705f, -0.712010f, -1.233386f, 0.168550f, -0.217845f, -0.111374f,
                                              0.119490f, 1.073685f, 0.163558f, -1.079924f, -1.061508f, 0.646183f,
                                              0.169032f, 0.077357f, -0.409495f, 0.459638f, -1.377241f, -1.444473f,
                                              0.044526f, -0.645125f, -0.008607f, 0.199170f, -0.720871f, 0.392018f,
                                              -0.129046f, 0.087889f, -0.343697f, -1.191729f, 0.809838f, 0.450612f,
                                              0.069762f, 0.035725f, 0.899738f, 0.775956f, 0.531333f, -0.618483f,
                                              -0.678670f, -0.343992f, -0.962667f, -1.428859f, -0.936808f, 0.104576f,
                                              -0.546771f, -0.026791f, 0.161619f, -0.069888f, -1.846316f, -0.771487f,
                                              0.992921f, 0.665170f, -0.717861f, 0.557853f, 0.519724f, -0.404825f,
                                              0.442858f, 0.475692f, 0.493212f, 0.346516f, -1.259973f, 0.297456f,
                                              -0.031246f, -0.438064f, 0.339056f, -0.223930f, 0.114509f, 0.227772f,
                                              0.215753f, 0.329259f, -1.316489f, -1.867779f, 0.437388f, 0.164334f,
                                              0.116019f, -0.036232f, 0.309805f, 0.279428f, -1.071994f, 0.170186f,
                                              0.715263f, 0.009331f, 1.094830f, -0.279282f, -0.482939f, -0.109133f,
                                              -1.604116f, 0.318897f, -0.867173f, 0.081023f, -0.072292f, -0.031761f,
                                              0.728888f, 0.078491f, -0.845898f, -0.655739f, -0.563391f, 0.310216f,
                                              0.108173f, -1.156058f, 0.021806f, -0.022085f, 0.628114f, 0.687814f,
                                              1.050424f, -0.898594f, -0.226317f, 0.435544f, -0.262825f, -0.449458f,
                                              -0.026522f, -0.088879f, -0.392370f, -0.144918f, -0.435526f, -0.216860f,
                                              -0.258563f, -0.227660f, -0.973858f, -0.376879f, -0.150753f, -0.283490f,
                                              -0.355830f, -0.286401f, -0.410324f, -0.113034f, -0.369145f, -0.198921f,
                                              -0.469882f, -0.401333f, -0.293455f, -0.052371f, -0.237725f, -0.287438f,
                                              -0.315661f, -0.314225f, -0.288708f, -0.065321f, -0.390548f, -0.366256f,
                                              0.083595f, -0.614847f, -0.609089f, 0.094381f, 1.025394f, 0.300519f,
                                              -0.132765f, 0.420067f, 0.283853f, -0.457966f, 0.265899f, -0.346206f,
                                              -0.751623f, -1.134039f, -0.385935f, -0.147039f, -0.414468f, -0.811253f,
                                              -0.225744f, -0.220206f, 1.012192f, 0.357551f, 0.305283f, -0.797707f,
                                              0.347448f, 0.136018f, 0.707048f, -0.479752f, 0.223929f, 0.086689f,
                                              0.426695f, 0.183234f, -0.363489f, -0.082089f, -0.806882f, -0.154751f,
                                              -1.140343f, 0.127999f, -0.504666f, -1.219841f, -0.715098f, 0.547765f,
                                              -0.136565f, -0.022952f, -0.352256f, -0.272883f, 0.008451f, -0.390516f,
                                              0.947211f, 0.735709f, 0.120967f, 0.339968f, -1.699581f, 0.434892f,
                                              0.043635f, -0.060599f, -0.134400f, -0.451647f, -1.134109f, 0.034953f,
                                              -1.022251f, 0.424338f, 0.218156f, 0.315450f, -0.214050f, -1.207347f,
                                              0.529562f, 0.117465f, -0.730075f, -0.182269f, -0.527818f, 0.619258f,
                                              -0.011526f, -0.393957f, -1.234818f, 0.340490f, 0.245211f, -0.959157f,
                                              -0.145034f, -0.864005f, -0.905871f, 0.438941f, 0.552599f, 0.600106f,
                                              0.102127f, -0.048238f, -1.376286f, 0.005621f, -0.362389f, -0.002330f,
                                              0.090250f, 0.525796f, 0.036343f, -0.311913f, 0.490991f, -0.733091f};
            std::vector<float> fc2_bias = {-0.046948f, -0.299012f, 0.041010f, 0.131028f, 0.309179f, -0.358801f,
                                           0.026470f, -0.223024f, -0.165892f};
            fc2.set_weights(Tensor4D(1, 9, 32, 1, fc2_weights));
            fc2.set_bias(Tensor4D(1, 9, 1, 1, fc2_bias));

            std::vector<float> fc3_weights = {0.074316f, -0.292120f, 0.086539f, -0.131281f, -0.145958f, -0.008897f,
                                              -0.221589f, 0.313159f, 0.248520f, -0.011982f, 0.127166f, 0.128611f,
                                              0.085327f, -0.145125f, -0.109189f, 0.111475f, -0.117653f, -0.001354f,
                                              -0.066829f, -0.103326f, -0.035311f, -0.190731f, 0.147150f, -0.117456f,
                                              0.192278f, -0.179551f, 0.390883f, 0.052627f, -0.278980f, -0.094666f,
                                              0.025346f, 0.026083f};
            std::vector<float> fc3_bias = {-0.016319f};
            fc3.set_weights(Tensor4D(1, 1, 32, 1, fc3_weights));
            fc3.set_bias(Tensor4D(1, 1, 1, 1, fc3_bias));
        }

        std::pair<Tensor4D, Tensor4D> forward(const Tensor4D &x) {
            Tensor4D out = conv1.forward(x);
            out = bn1.forward(out);
            out = ReLULayer().forward(out);
            out = pool.forward(out);
            out = flatten.forward(out);
            out = fc1.forward(out);
            out = ReLULayer().forward(out);

            Tensor4D policy = fc2.forward(out);
            policy = softmax.forward(policy);

            Tensor4D value = fc3.forward(out);
            value = Tanh().forward(value);

            return {policy, value};
        }
    };

} // namespace nnm

