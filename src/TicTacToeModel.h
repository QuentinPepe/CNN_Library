
#pragma once

#include "ConvolutionalLayer.h"
#include "BatchNorm2d.h"
#include "MaxPoolingLayer.h"
#include "FlattenLayer.h"
#include "LinearLayer.h"
#include "ReLULayer.h"
#include "Tanh.h"
#include "Tensor4D.h"
#include <vector>
#include "SoftMaxLayer.h"

namespace nnm {

    class TicTacToeModel {
    private:
        ConvolutionalLayer conv1;
        BatchNorm2d bn1;
        MaxPoolingLayer pool;
        Flatten flatten;
        LinearLayer fc1;
        LinearLayer fc2;
        LinearLayer fc3;
        SoftMaxLayer softmax;

    public:
        TicTacToeModel() :
                conv1(3, 16, 3, 1, 1),
                bn1(16),
                pool(2, 2, 2),
                flatten(),
                fc1(16 * 1 * 1, 32),
                fc2(32, 9),
                fc3(32, 1),
                softmax(1) {
            // Initialize weights and biases
            std::vector<float> conv1_weights = {0.022071f, -0.017566f, 0.147423f, -0.168140f, -0.087841f, -0.086986f,
                                                0.166287f, -0.186142f, 0.019087f, -0.186424f, -0.006328f, 0.071733f,
                                                -0.045005f, 0.186818f, 0.000613f, -0.098117f, 0.049626f, 0.100086f,
                                                -0.000382f, 0.164636f, -0.121805f, 0.082114f, 0.109280f, 0.095588f,
                                                -0.000071f, 0.054938f, -0.150979f, -0.151026f, -0.011962f, -0.024120f,
                                                0.142899f, 0.139743f, 0.130490f, -0.088148f, -0.151080f, -0.180518f,
                                                0.069650f, -0.173413f, -0.192115f, -0.097260f, -0.162486f, -0.075842f,
                                                -0.121156f, -0.098734f, 0.182967f, -0.036267f, 0.159645f, 0.004270f,
                                                -0.024748f, -0.056346f, -0.137569f, -0.154624f, 0.133257f, -0.059305f,
                                                -0.187635f, 0.176617f, 0.003570f, -0.128778f, -0.151276f, -0.161617f,
                                                -0.168751f, 0.174152f, 0.132693f, 0.015741f, -0.164020f, -0.050336f,
                                                -0.180787f, 0.066322f, -0.051099f, -0.041183f, -0.060047f, 0.090231f,
                                                0.104171f, 0.042158f, -0.024100f, -0.019019f, -0.003363f, -0.143311f,
                                                0.187787f, -0.083000f, 0.111969f, -0.107887f, 0.001292f, 0.065881f,
                                                -0.176704f, 0.088277f, -0.147310f, 0.026856f, -0.038163f, 0.110317f,
                                                0.187042f, 0.043372f, -0.005495f, -0.095348f, 0.071752f, -0.092631f,
                                                0.079495f, -0.083413f, 0.130542f, 0.147616f, 0.118007f, 0.001928f,
                                                0.089248f, -0.175367f, 0.156072f, -0.050001f, 0.070159f, -0.032589f,
                                                -0.064622f, -0.090376f, 0.124135f, -0.104702f, -0.033938f, 0.097081f,
                                                0.019396f, -0.161927f, -0.191368f, -0.093564f, 0.177500f, -0.136837f,
                                                0.106066f, 0.137759f, -0.079770f, -0.084987f, -0.138456f, 0.030019f,
                                                -0.026904f, 0.009350f, 0.083477f, 0.080798f, -0.060717f, 0.013218f,
                                                0.045716f, 0.004097f, 0.038511f, -0.077960f, 0.157746f, -0.019740f,
                                                -0.024623f, -0.172726f, -0.139501f, 0.005986f, -0.029763f, -0.096760f,
                                                0.100738f, -0.017229f, 0.067682f, 0.162094f, -0.088478f, -0.094719f,
                                                -0.038672f, -0.016297f, -0.096256f, -0.046204f, -0.005547f, 0.086326f,
                                                0.178048f, 0.142511f, 0.020368f, -0.012128f, 0.049297f, -0.007856f,
                                                -0.025257f, 0.066178f, -0.156577f, -0.163667f, 0.000780f, -0.058331f,
                                                -0.095190f, -0.179160f, 0.128915f, -0.007668f, -0.103399f, -0.078393f,
                                                0.050596f, -0.139572f, 0.012360f, -0.002373f, 0.065561f, 0.076344f,
                                                -0.125743f, 0.083098f, 0.145323f, 0.012390f, 0.098045f, -0.072859f,
                                                0.038226f, 0.056234f, -0.088889f, 0.118822f, -0.181961f, -0.072291f,
                                                -0.113235f, -0.114246f, -0.116615f, -0.181344f, 0.033028f, -0.038070f,
                                                -0.162045f, -0.000079f, -0.032059f, 0.079391f, -0.150743f, -0.054141f,
                                                0.039613f, 0.081577f, 0.014559f, 0.052154f, 0.192380f, -0.066667f,
                                                0.131163f, 0.165774f, -0.170244f, 0.046553f, 0.109013f, -0.030020f,
                                                0.106213f, 0.006546f, 0.146509f, 0.004144f, -0.123211f, 0.146154f,
                                                0.057235f, 0.163731f, 0.047774f, 0.102192f, 0.119995f, 0.032406f,
                                                -0.044738f, 0.039748f, -0.134186f, 0.006575f, -0.061856f, 0.012168f,
                                                -0.152374f, 0.117591f, -0.177557f, 0.082415f, 0.126740f, -0.176380f,
                                                0.173881f, -0.143064f, -0.037791f, 0.099727f, -0.061026f, 0.171509f,
                                                -0.084900f, -0.025766f, -0.125802f, -0.089283f, 0.187802f, 0.144735f,
                                                0.014170f, 0.015824f, -0.163312f, 0.145290f, -0.028854f, -0.080270f,
                                                -0.153156f, 0.158229f, 0.091257f, 0.115918f, 0.019927f, -0.130591f,
                                                0.078834f, 0.022195f, 0.064581f, -0.047922f, -0.090820f, 0.157988f,
                                                0.064512f, -0.078108f, 0.017186f, -0.041834f, -0.016458f, 0.107918f,
                                                -0.153175f, 0.174174f, 0.129530f, 0.000165f, -0.078719f, 0.039239f,
                                                -0.127384f, 0.125006f, -0.101779f, 0.036772f, -0.189338f, 0.092159f,
                                                0.130279f, 0.144449f, 0.015709f, 0.113630f, 0.065618f, 0.129060f,
                                                0.108601f, -0.168380f, 0.020288f, -0.065610f, -0.091894f, 0.134708f,
                                                -0.027544f, 0.029896f, 0.121172f, 0.129542f, 0.102705f, -0.033600f,
                                                -0.171549f, -0.184749f, 0.060493f, -0.002284f, -0.121592f, 0.084049f,
                                                0.174685f, 0.111308f, -0.027149f, 0.026005f, -0.122757f, 0.090835f,
                                                -0.149139f, 0.132866f, -0.087901f, -0.076328f, -0.161198f, -0.046538f,
                                                -0.018616f, -0.088706f, 0.136995f, 0.110448f, -0.169849f, -0.019251f,
                                                0.064704f, 0.185675f, -0.046017f, 0.118151f, -0.010782f, -0.073813f,
                                                0.117772f, -0.171490f, 0.161235f, 0.192225f, -0.052544f, 0.076022f,
                                                0.191912f, 0.058021f, 0.075261f, 0.070666f, -0.078736f, 0.046977f,
                                                -0.102571f, 0.164336f, -0.082468f, 0.043995f, -0.055749f, 0.096244f,
                                                0.003172f, 0.105819f, -0.052112f, -0.112932f, 0.073784f, -0.108307f,
                                                -0.158007f, 0.074355f, -0.115746f, -0.072337f, -0.048054f, 0.013665f,
                                                -0.066653f, -0.069263f, -0.048370f, 0.134867f, 0.057625f, -0.092653f,
                                                -0.133027f, 0.004459f, 0.061654f, -0.004027f, 0.112658f, 0.161872f,
                                                0.056405f, 0.063470f, 0.111653f, -0.065929f, 0.034137f, 0.155593f,
                                                -0.092157f, 0.014978f, -0.075240f, -0.147979f, 0.101935f, 0.153778f,
                                                -0.103968f, 0.072128f, 0.059014f, 0.075145f, 0.105937f, 0.179670f,
                                                0.146070f, -0.168396f, -0.075446f, 0.102211f, -0.109864f, 0.037789f,
                                                -0.082504f, 0.038223f, 0.093904f, 0.060489f, 0.139803f, -0.023159f,
                                                0.104476f, 0.062217f, -0.060651f, -0.135921f, 0.176069f, -0.057379f,
                                                0.144958f, 0.121308f, -0.007750f, -0.158965f, 0.015493f, -0.093034f,
                                                0.050078f, -0.076497f, 0.148331f, -0.173635f, -0.051808f, 0.030349f,
                                                0.018359f, 0.158105f, -0.060807f, -0.153624f, 0.127418f, 0.053776f};
            std::vector<float> conv1_bias = {0.126775f, -0.113903f, -0.113035f, -0.077740f, 0.013683f, 0.065213f,
                                             -0.110592f, -0.018119f, -0.033262f, 0.175599f, -0.069405f, 0.186498f,
                                             -0.118035f, -0.079301f, -0.144750f, 0.141778f};
            conv1.set_weights(Tensor4D(16, 3, 3, 3, conv1_weights));
            conv1.set_bias(Tensor4D(1, 16, 1, 1, conv1_bias));

            std::vector<float> bn1_weight = {1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f,
                                             1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f,
                                             1.000000f, 1.000000f, 1.000000f, 1.000000f};
            std::vector<float> bn1_bias = {0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
                                           0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
                                           0.000000f, 0.000000f};
            std::vector<float> bn1_running_mean = {0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
                                                   0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
                                                   0.000000f, 0.000000f, 0.000000f, 0.000000f};
            std::vector<float> bn1_running_var = {1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f,
                                                  1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f,
                                                  1.000000f, 1.000000f, 1.000000f, 1.000000f};
            bn1.set_parameters(
                    Tensor4D(1, 16, 1, 1, bn1_weight),
                    Tensor4D(1, 16, 1, 1, bn1_bias),
                    Tensor4D(1, 16, 1, 1, bn1_running_mean),
                    Tensor4D(1, 16, 1, 1, bn1_running_var)
            );

            std::vector<float> fc1_weights = {-0.171920f, 0.103483f, -0.091866f, 0.249127f, 0.035264f, -0.217104f,
                                              0.043026f, 0.030395f, -0.241802f, 0.050173f, 0.238524f, 0.071944f,
                                              -0.001330f, -0.051826f, 0.066435f, -0.111379f, 0.246191f, 0.216115f,
                                              0.116792f, -0.093120f, -0.234739f, -0.143918f, 0.243074f, -0.229470f,
                                              -0.238703f, -0.018018f, 0.079538f, -0.248823f, -0.232105f, 0.001359f,
                                              -0.083859f, 0.174170f, 0.071778f, -0.217006f, -0.225327f, 0.171688f,
                                              -0.044330f, -0.109364f, 0.078745f, -0.049134f, 0.119562f, 0.063398f,
                                              -0.108243f, -0.200372f, 0.135336f, -0.150203f, -0.027651f, 0.034182f,
                                              -0.145492f, 0.136181f, -0.175847f, 0.061402f, 0.026738f, 0.091728f,
                                              -0.245354f, 0.014441f, 0.121877f, -0.160054f, 0.061863f, 0.000980f,
                                              0.212087f, -0.052937f, 0.001708f, -0.108734f, -0.061613f, 0.071569f,
                                              -0.241111f, 0.189652f, 0.179775f, 0.105874f, 0.187149f, -0.077822f,
                                              0.056944f, 0.012719f, -0.172874f, -0.096111f, -0.088753f, -0.061813f,
                                              -0.221985f, -0.175822f, -0.023741f, -0.038031f, -0.226937f, 0.053417f,
                                              0.136124f, 0.208203f, 0.210401f, -0.174692f, -0.080121f, -0.118599f,
                                              0.045853f, 0.066992f, 0.055622f, 0.146093f, 0.131894f, -0.134187f,
                                              0.171620f, 0.168642f, 0.033084f, -0.217506f, -0.153331f, 0.069669f,
                                              0.086436f, 0.233113f, 0.127238f, 0.090611f, -0.008527f, 0.170467f,
                                              -0.090997f, 0.101792f, -0.119072f, -0.002333f, 0.147749f, 0.114713f,
                                              -0.056101f, -0.003166f, -0.138783f, 0.115800f, 0.168220f, 0.086056f,
                                              -0.241916f, -0.178963f, 0.167364f, -0.035796f, 0.153532f, 0.184277f,
                                              -0.073232f, -0.146680f, -0.235198f, 0.095630f, 0.128221f, -0.043341f,
                                              -0.242706f, -0.161028f, -0.013470f, 0.114101f, -0.083771f, -0.161389f,
                                              -0.174044f, 0.223682f, 0.090531f, -0.202979f, -0.154393f, -0.212224f,
                                              0.036170f, -0.101516f, -0.000846f, -0.039550f, -0.218835f, -0.223406f,
                                              -0.193907f, -0.104703f, 0.038884f, -0.117569f, -0.008911f, -0.029946f,
                                              0.228635f, -0.113967f, 0.234883f, -0.191922f, -0.208584f, 0.081298f,
                                              -0.145499f, 0.128231f, -0.138312f, 0.196866f, 0.242073f, 0.016005f,
                                              0.053430f, 0.233080f, 0.148204f, -0.218247f, -0.008003f, -0.225669f,
                                              0.190972f, -0.045791f, -0.001743f, -0.153597f, -0.135939f, 0.032445f,
                                              0.206268f, -0.125663f, 0.023623f, 0.226302f, 0.224053f, -0.048876f,
                                              0.234315f, 0.091042f, 0.227691f, 0.007417f, -0.211874f, -0.068051f,
                                              0.074983f, 0.133319f, -0.249052f, 0.194462f, -0.224269f, 0.146480f,
                                              0.246667f, 0.061609f, -0.047183f, 0.137651f, -0.074201f, -0.185183f,
                                              -0.177422f, 0.117545f, 0.190931f, 0.010123f, -0.242397f, -0.245652f,
                                              -0.056452f, 0.134955f, -0.166599f, 0.067385f, -0.136643f, 0.203404f,
                                              -0.065508f, -0.052100f, -0.219270f, -0.223923f, 0.016896f, 0.040423f,
                                              0.135067f, -0.218607f, 0.043805f, -0.036115f, 0.146649f, -0.113674f,
                                              0.074482f, 0.100742f, 0.125584f, -0.085747f, 0.080453f, -0.048996f,
                                              0.067320f, -0.153726f, -0.198652f, -0.204497f, -0.157157f, -0.105807f,
                                              0.037213f, -0.054684f, -0.142319f, 0.002100f, -0.078949f, 0.154108f,
                                              -0.205901f, -0.092277f, -0.160658f, 0.030848f, 0.013639f, -0.014381f,
                                              0.248049f, -0.095371f, -0.035932f, 0.064589f, 0.208653f, 0.189494f,
                                              0.028560f, -0.094582f, 0.082130f, 0.157296f, -0.005335f, 0.137258f,
                                              0.204605f, -0.133942f, -0.055269f, -0.225079f, 0.057388f, 0.178173f,
                                              -0.048548f, 0.039892f, 0.079883f, -0.005332f, 0.194360f, 0.036430f,
                                              -0.245736f, -0.206447f, -0.247691f, 0.010304f, 0.135142f, -0.032983f,
                                              0.224778f, -0.044976f, 0.051113f, 0.225435f, 0.126523f, -0.007976f,
                                              0.240806f, -0.149366f, 0.093119f, 0.157884f, -0.154798f, -0.234836f,
                                              0.079966f, -0.094847f, -0.126160f, 0.049726f, -0.181357f, 0.224851f,
                                              -0.022441f, -0.080063f, 0.208995f, 0.069610f, 0.047631f, -0.119533f,
                                              0.238269f, -0.076142f, 0.207933f, -0.018377f, 0.125409f, 0.175781f,
                                              -0.186126f, -0.166626f, -0.247214f, 0.180316f, 0.214996f, -0.091367f,
                                              -0.122445f, 0.041848f, 0.134595f, 0.061709f, -0.052102f, -0.159019f,
                                              0.213817f, -0.161903f, -0.241575f, -0.099818f, 0.049852f, 0.092923f,
                                              0.096667f, -0.144825f, -0.095947f, -0.111170f, -0.121065f, -0.210568f,
                                              0.051175f, -0.072704f, -0.240627f, -0.145979f, -0.150137f, -0.107841f,
                                              -0.154476f, -0.043355f, 0.089591f, -0.202328f, -0.021416f, -0.071947f,
                                              -0.127815f, -0.055512f, -0.105958f, 0.008037f, -0.180463f, 0.047410f,
                                              0.229533f, 0.207153f, -0.112090f, 0.077057f, -0.236301f, 0.210486f,
                                              -0.249141f, -0.223407f, -0.224407f, -0.232163f, 0.033857f, -0.066108f,
                                              0.059837f, -0.015469f, -0.005370f, -0.090320f, -0.148324f, -0.209314f,
                                              0.126146f, -0.128900f, -0.050845f, 0.121424f, -0.061915f, -0.063034f,
                                              -0.166661f, -0.213900f, 0.119992f, -0.056405f, 0.157201f, 0.016454f,
                                              -0.000318f, -0.225700f, 0.005520f, -0.056499f, -0.142659f, -0.057859f,
                                              0.013070f, -0.188371f, 0.041571f, 0.173954f, 0.049387f, 0.238638f,
                                              0.116661f, -0.197162f, -0.098404f, -0.060161f, 0.074786f, -0.007130f,
                                              0.201174f, 0.029042f, -0.158328f, -0.091654f, -0.207990f, -0.068932f,
                                              0.122914f, 0.002414f, -0.238401f, -0.216324f, 0.090637f, -0.219426f,
                                              -0.199405f, -0.149054f, 0.238280f, -0.071086f, -0.103075f, -0.168803f,
                                              0.159927f, -0.040367f, 0.048209f, 0.059722f, 0.070507f, 0.160022f,
                                              0.012973f, 0.025859f, -0.016235f, -0.194267f, -0.057212f, 0.237939f,
                                              -0.177181f, -0.157777f, -0.248078f, 0.015159f, -0.233831f, -0.128049f,
                                              0.230360f, 0.103541f, 0.133193f, 0.042808f, -0.212445f, -0.116330f,
                                              -0.202390f, -0.154590f, 0.085136f, -0.069339f, 0.244316f, -0.182239f,
                                              -0.213353f, 0.246851f, -0.215964f, 0.212733f, 0.067319f, -0.227863f,
                                              0.217745f, -0.068061f, -0.103084f, -0.195025f, -0.211461f, 0.055662f,
                                              -0.245565f, 0.102731f, -0.061777f, 0.087736f, -0.061210f, 0.086455f,
                                              -0.006829f, 0.073479f, -0.101711f, -0.171961f, 0.031839f, -0.159570f,
                                              -0.154977f, -0.240392f, -0.079687f, -0.167047f, 0.194688f, 0.180162f,
                                              0.059316f, 0.203126f, 0.120379f, -0.235506f, -0.025014f, -0.040581f,
                                              -0.151791f, 0.071203f, -0.078028f, -0.119545f, -0.002914f, -0.166218f,
                                              0.206913f, 0.158195f, 0.236648f, -0.044280f, 0.081649f, -0.010056f,
                                              -0.206870f, 0.113104f, -0.174623f, -0.090245f, -0.111956f, -0.243892f,
                                              0.008967f, 0.040956f, -0.018586f, 0.183863f, 0.011987f, -0.045537f,
                                              -0.136361f, -0.148476f};
            std::vector<float> fc1_bias = {-0.035543f, -0.146726f, -0.164918f, -0.033066f, -0.044141f, -0.152606f,
                                           0.146072f, 0.212019f, -0.170457f, 0.109502f, -0.116003f, -0.025959f,
                                           0.233376f, 0.031990f, -0.238368f, 0.229822f, -0.010577f, -0.125183f,
                                           -0.132028f, 0.214383f, 0.004219f, 0.138084f, 0.164307f, -0.097033f,
                                           0.021219f, -0.161714f, 0.208763f, -0.132199f, 0.166055f, 0.063342f,
                                           0.154217f, -0.176142f};
            fc1.set_weights(Tensor4D(1, 32, 16, 1, fc1_weights));
            fc1.set_bias(Tensor4D(1, 32, 1, 1, fc1_bias));

            std::vector<float> fc2_weights = {-0.005498f, 0.091599f, -0.007056f, -0.002536f, 0.086144f, -0.132123f,
                                              -0.035442f, 0.080520f, 0.086700f, 0.164187f, -0.034969f, 0.041885f,
                                              -0.086979f, -0.029669f, -0.088745f, 0.131004f, 0.001077f, 0.071915f,
                                              0.097235f, 0.032942f, 0.018812f, -0.012939f, -0.149743f, 0.028482f,
                                              -0.039164f, -0.148586f, 0.164700f, -0.018846f, -0.088227f, -0.172095f,
                                              -0.162820f, 0.067317f, -0.080699f, -0.076363f, -0.102287f, 0.142695f,
                                              -0.042495f, 0.114583f, 0.140340f, -0.137055f, 0.131883f, -0.033757f,
                                              0.169311f, 0.090294f, -0.171241f, 0.032841f, 0.062142f, -0.064130f,
                                              0.134052f, -0.146393f, -0.056092f, 0.168438f, 0.172648f, 0.088307f,
                                              -0.105526f, -0.152099f, -0.143732f, -0.044192f, 0.100143f, 0.055968f,
                                              -0.021468f, 0.158984f, 0.138817f, -0.082622f, -0.076554f, -0.002074f,
                                              0.036684f, -0.001266f, 0.068247f, 0.121967f, -0.031875f, 0.086814f,
                                              0.024043f, 0.067856f, 0.072775f, -0.047249f, -0.078818f, 0.075561f,
                                              -0.113182f, 0.092808f, -0.113424f, 0.121275f, 0.070930f, -0.043308f,
                                              0.101044f, -0.058217f, 0.037661f, 0.052047f, 0.018054f, 0.035500f,
                                              -0.003509f, -0.051070f, 0.098625f, 0.069726f, 0.065937f, 0.119345f,
                                              -0.092493f, -0.041072f, -0.005039f, 0.142656f, -0.140769f, -0.101399f,
                                              -0.042108f, -0.151003f, -0.139666f, 0.121096f, 0.008246f, -0.142213f,
                                              -0.029189f, -0.005812f, -0.062847f, -0.147865f, 0.096208f, -0.021834f,
                                              0.172593f, -0.135387f, -0.097048f, -0.009184f, -0.123103f, 0.128830f,
                                              0.136706f, 0.160148f, -0.111592f, 0.125777f, 0.122742f, -0.070339f,
                                              0.019398f, 0.084238f, 0.126500f, -0.165109f, 0.175994f, -0.044446f,
                                              0.072027f, -0.109794f, -0.136037f, -0.119719f, 0.104184f, -0.087198f,
                                              0.102762f, 0.053442f, 0.070318f, -0.039319f, -0.055919f, -0.082710f,
                                              -0.098813f, 0.162994f, -0.009607f, -0.075808f, -0.164474f, 0.007690f,
                                              -0.175475f, -0.002082f, 0.111618f, -0.101818f, 0.097128f, -0.056390f,
                                              -0.135961f, -0.175087f, 0.087819f, -0.135251f, 0.086316f, 0.025311f,
                                              0.096077f, -0.132881f, 0.154590f, -0.176075f, -0.134180f, 0.106011f,
                                              0.006008f, -0.099266f, -0.037081f, -0.157320f, -0.153850f, -0.037927f,
                                              0.134855f, 0.052793f, 0.033335f, -0.046851f, 0.160897f, 0.001693f,
                                              0.059689f, 0.002810f, 0.027585f, 0.058949f, 0.135655f, 0.101754f,
                                              0.022624f, 0.070675f, -0.053162f, 0.120833f, 0.049625f, 0.133410f,
                                              -0.027601f, -0.144334f, 0.034921f, 0.071898f, 0.142839f, 0.068517f,
                                              0.065315f, 0.140680f, -0.060751f, 0.156081f, 0.090632f, 0.118060f,
                                              0.126075f, -0.144424f, 0.092076f, 0.164639f, -0.124189f, -0.015151f,
                                              -0.107886f, -0.042686f, 0.026345f, 0.094559f, -0.051321f, -0.167394f,
                                              0.095453f, 0.099177f, -0.032047f, 0.151334f, 0.136276f, -0.038963f,
                                              0.006826f, 0.031139f, -0.034641f, -0.043551f, -0.079797f, -0.100531f,
                                              0.088285f, -0.052492f, -0.084807f, 0.155722f, 0.028264f, 0.127548f,
                                              0.161095f, -0.024903f, 0.026369f, 0.163897f, -0.121629f, -0.053002f,
                                              0.025155f, -0.011993f, 0.047065f, 0.092954f, -0.072729f, 0.013765f,
                                              0.159932f, -0.100030f, -0.119877f, -0.135570f, 0.105670f, -0.162145f,
                                              -0.085967f, 0.119394f, -0.105974f, 0.143757f, -0.082637f, 0.027966f,
                                              0.023140f, -0.004336f, 0.110104f, 0.150140f, -0.110373f, 0.099142f,
                                              0.047232f, -0.003294f, -0.123604f, 0.052439f, 0.128311f, -0.151734f,
                                              -0.163263f, -0.173786f, 0.040846f, -0.050794f, -0.054912f, 0.164607f,
                                              -0.045090f, -0.112262f, 0.015901f, -0.097026f, -0.051795f, 0.093379f,
                                              0.040799f, -0.121308f, 0.168298f, 0.119601f, -0.120506f, 0.077001f};
            std::vector<float> fc2_bias = {0.072641f, -0.126846f, -0.124238f, -0.146375f, 0.078745f, 0.030799f,
                                           0.074709f, -0.077645f, 0.132923f};
            fc2.set_weights(Tensor4D(1, 9, 32, 1, fc2_weights));
            fc2.set_bias(Tensor4D(1, 9, 1, 1, fc2_bias));

            std::vector<float> fc3_weights = {0.022572f, -0.141055f, -0.044495f, 0.090216f, 0.038870f, -0.027044f,
                                              -0.123506f, -0.109967f, 0.152476f, -0.101264f, 0.125271f, -0.059170f,
                                              0.001767f, -0.172143f, -0.057464f, 0.149019f, -0.158710f, 0.088947f,
                                              -0.148773f, 0.025783f, -0.160272f, -0.139942f, -0.142711f, -0.061297f,
                                              0.024069f, -0.129608f, 0.044802f, 0.106471f, 0.144108f, 0.156526f,
                                              0.116388f, -0.052054f};
            std::vector<float> fc3_bias = {-0.016292f};
            fc3.set_weights(Tensor4D(1, 1, 32, 1, fc3_weights));
            fc3.set_bias(Tensor4D(1, 1, 1, 1, fc3_bias));
        }

        std::pair<Tensor4D, Tensor4D> forward(const Tensor4D &x) {
            Tensor4D out = conv1.forward(x);
            out = bn1.forward(out);
            out = ReLULayer().forward(out);
            out = pool.forward(out);
            out = flatten.forward(out);
            out = fc1.forward(out);
            out = ReLULayer().forward(out);

            Tensor4D policy = fc2.forward(out);
            policy = softmax.forward(policy);

            Tensor4D value = fc3.forward(out);
            value = Tanh().forward(value);

            return {policy, value};
        }
    };

} // namespace nnm

