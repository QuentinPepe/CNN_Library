
#pragma once

#include "ConvolutionalLayer.h"
#include "BatchNorm2d.h"
#include "MaxPoolingLayer.h"
#include "FlattenLayer.h"
#include "LinearLayer.h"
#include "ReLULayer.h"
#include "Tanh.h"
#include "Tensor4D.h"
#include <vector>
#include "SoftMaxLayer.h"

namespace nnm {

    class TicTacToeModel {
    private:
        ConvolutionalLayer conv1;
        BatchNorm2d bn1;
        MaxPoolingLayer pool;
        Flatten flatten;
        LinearLayer fc1;
        LinearLayer fc2;
        LinearLayer fc3;
        SoftMaxLayer softmax;

    public:
        TicTacToeModel() :
                conv1(3, 16, 3, 1, 1),
                bn1(16),
                pool(2, 2, 2),
                flatten(),
                fc1(16 * 1 * 1, 32),
                fc2(32, 10),
                fc3(32, 1),
                softmax(1) {
            // Initialize weights and biases
            std::vector<float> conv1_weights = {-0.001441f, 0.103239f, -0.158395f, -0.141632f, -0.074123f, 0.051607f,
                                                -0.003813f, 0.152592f, -0.017079f, 0.050925f, -0.058161f, -0.037829f,
                                                -0.183857f, -0.127456f, -0.079332f, 0.007129f, 0.076082f, 0.115474f,
                                                -0.130470f, -0.083805f, 0.069901f, 0.159808f, -0.039606f, 0.144013f,
                                                -0.031020f, 0.020364f, 0.174259f, -0.178530f, -0.121155f, -0.048722f,
                                                -0.075017f, 0.166277f, -0.124742f, -0.088591f, -0.134453f, -0.180241f,
                                                -0.112341f, 0.165430f, 0.085875f, 0.093275f, 0.010121f, -0.098666f,
                                                0.032560f, -0.179690f, -0.139058f, -0.099214f, 0.121424f, 0.112838f,
                                                -0.085351f, -0.006944f, 0.123084f, 0.191321f, 0.076380f, 0.025999f,
                                                0.129035f, -0.113315f, 0.035862f, -0.149208f, -0.133384f, -0.099417f,
                                                0.087078f, 0.077396f, -0.113998f, 0.058141f, 0.105650f, -0.024291f,
                                                0.007348f, 0.044592f, 0.119392f, 0.184789f, -0.148307f, -0.070527f,
                                                0.075635f, 0.159454f, 0.167471f, 0.169810f, 0.038300f, -0.167351f,
                                                0.017704f, -0.120398f, -0.179355f, 0.170990f, 0.146331f, -0.191974f,
                                                0.036021f, -0.032420f, -0.031670f, -0.088095f, 0.074008f, -0.113989f,
                                                0.070551f, 0.097324f, 0.137770f, 0.071959f, -0.190475f, -0.124842f,
                                                0.096093f, 0.040280f, -0.150127f, -0.110817f, 0.181047f, 0.129676f,
                                                -0.083913f, -0.048437f, -0.183328f, -0.003459f, -0.144926f, -0.148448f,
                                                -0.010604f, 0.028895f, -0.078814f, 0.114196f, -0.117113f, 0.174623f,
                                                0.131886f, -0.162290f, -0.047898f, 0.008684f, 0.028079f, 0.045644f,
                                                0.075523f, 0.011528f, -0.093902f, 0.091065f, -0.184608f, -0.114066f,
                                                -0.048176f, -0.093745f, -0.067325f, -0.157736f, -0.040937f, 0.041137f,
                                                -0.125375f, -0.009876f, 0.137766f, -0.019784f, 0.005349f, -0.016602f,
                                                0.038948f, 0.122367f, 0.182298f, 0.122217f, 0.182715f, -0.013918f,
                                                -0.172882f, -0.091236f, 0.131040f, -0.001248f, -0.095657f, -0.147477f,
                                                -0.180105f, -0.162429f, -0.039036f, 0.105541f, 0.104046f, -0.185605f,
                                                0.120047f, -0.150594f, -0.040686f, -0.078033f, -0.037069f, -0.037786f,
                                                -0.172695f, -0.166169f, -0.030114f, 0.002489f, -0.087425f, 0.072496f,
                                                -0.173216f, -0.012988f, 0.169244f, -0.078499f, 0.173783f, 0.069697f,
                                                -0.173679f, 0.121763f, -0.022208f, -0.085911f, 0.153893f, -0.155518f,
                                                0.020651f, -0.040293f, 0.137431f, 0.053721f, 0.092473f, 0.067965f,
                                                -0.046279f, -0.040473f, -0.158595f, 0.104278f, 0.152801f, 0.131679f,
                                                -0.135750f, 0.008583f, -0.135665f, -0.105941f, -0.112142f, 0.065769f,
                                                -0.114684f, -0.004199f, 0.008096f, 0.124058f, -0.145477f, -0.132119f,
                                                -0.111748f, 0.134702f, -0.069179f, 0.162329f, 0.069591f, 0.024369f,
                                                -0.001433f, -0.038044f, 0.024146f, -0.043945f, -0.001352f, 0.024555f,
                                                -0.150535f, -0.100869f, 0.155402f, -0.156182f, -0.013819f, 0.190379f,
                                                0.069520f, 0.005449f, -0.166779f, 0.095336f, -0.137078f, -0.054630f,
                                                -0.064570f, -0.028499f, 0.002105f, 0.158734f, 0.024025f, 0.172376f,
                                                0.117724f, -0.121670f, 0.086315f, -0.136042f, -0.081565f, 0.056604f,
                                                0.063545f, 0.144381f, -0.061953f, 0.000308f, 0.099078f, -0.186117f,
                                                0.139138f, -0.159141f, 0.002652f, -0.032720f, -0.101358f, 0.025436f,
                                                0.159141f, -0.056257f, -0.114256f, -0.071176f, -0.190747f, 0.086871f,
                                                -0.092427f, -0.128430f, -0.110871f, 0.110650f, 0.101916f, 0.147710f,
                                                0.069806f, -0.064271f, -0.053780f, 0.056856f, 0.158201f, 0.052326f,
                                                -0.091057f, -0.090466f, -0.181956f, 0.041578f, -0.108000f, -0.171584f,
                                                0.168755f, -0.124979f, -0.021893f, 0.055136f, 0.006131f, -0.129496f,
                                                -0.155562f, 0.153399f, 0.031338f, 0.159661f, -0.064517f, 0.056687f,
                                                -0.044009f, -0.008558f, -0.117211f, 0.065087f, 0.060846f, -0.003970f,
                                                -0.043282f, -0.118632f, 0.133088f, -0.143264f, 0.078840f, -0.064712f,
                                                -0.092851f, 0.034573f, -0.099970f, 0.044341f, 0.037794f, -0.142892f,
                                                0.032043f, 0.081970f, 0.076178f, -0.024225f, -0.157768f, -0.029667f,
                                                0.066839f, -0.070221f, 0.073050f, 0.128165f, -0.100488f, 0.001898f,
                                                0.079578f, 0.015084f, 0.016076f, 0.024030f, -0.151294f, 0.015124f,
                                                0.133266f, 0.173419f, 0.113113f, 0.025789f, 0.089877f, -0.093623f,
                                                -0.159481f, -0.165492f, 0.191990f, 0.122165f, -0.133028f, 0.075295f,
                                                0.145332f, 0.192376f, 0.168277f, 0.149101f, -0.044121f, -0.067539f,
                                                0.158011f, 0.107845f, -0.115812f, 0.173016f, 0.092984f, 0.104911f,
                                                -0.120623f, 0.055214f, -0.067466f, 0.150372f, -0.034630f, 0.074923f,
                                                0.034183f, 0.081881f, -0.065400f, 0.093833f, -0.134421f, 0.043466f,
                                                -0.130210f, -0.189859f, -0.154548f, 0.151934f, 0.104122f, 0.180560f,
                                                0.154176f, -0.171867f, -0.131334f, -0.031097f, -0.124983f, 0.133637f,
                                                -0.145494f, -0.093897f, -0.185924f, -0.109263f, 0.158286f, 0.157570f,
                                                0.137763f, 0.148596f, 0.171124f, -0.049279f, 0.084678f, 0.171460f,
                                                0.063666f, 0.192388f, 0.099817f, 0.119636f, -0.067356f, 0.092343f,
                                                0.022114f, -0.045960f, -0.108486f, -0.107987f, -0.148087f, 0.129198f,
                                                0.136819f, -0.021903f, -0.111368f, 0.148746f, 0.123070f, 0.014306f,
                                                -0.090862f, 0.176871f, 0.078701f, -0.146098f, 0.184191f, 0.146142f,
                                                -0.070146f, 0.108187f, -0.109348f, -0.030160f, 0.163410f, 0.007952f,
                                                -0.136104f, -0.064323f, -0.052240f, -0.037129f, 0.018418f, 0.177984f,
                                                0.010304f, -0.118826f, 0.009864f, 0.092277f, 0.095463f, -0.175888f,
                                                -0.034437f, -0.143018f, -0.082116f, 0.069338f, -0.136665f, 0.071539f};
            std::vector<float> conv1_bias = {0.163347f, 0.012622f, -0.128266f, -0.068952f, 0.042024f, -0.146708f,
                                             0.095611f, -0.174720f, -0.185001f, -0.186996f, -0.039041f, 0.129410f,
                                             -0.182150f, 0.159962f, -0.076984f, 0.056366f};
            conv1.set_weights(Tensor4D(16, 3, 3, 3, conv1_weights));
            conv1.set_bias(Tensor4D(1, 16, 1, 1, conv1_bias));

            std::vector<float> bn1_weight = {1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f,
                                             1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f,
                                             1.000000f, 1.000000f, 1.000000f, 1.000000f};
            std::vector<float> bn1_bias = {0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
                                           0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
                                           0.000000f, 0.000000f};
            std::vector<float> bn1_running_mean = {0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
                                                   0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
                                                   0.000000f, 0.000000f, 0.000000f, 0.000000f};
            std::vector<float> bn1_running_var = {1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f,
                                                  1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f,
                                                  1.000000f, 1.000000f, 1.000000f, 1.000000f};
            bn1.set_parameters(
                    Tensor4D(1, 16, 1, 1, bn1_weight),
                    Tensor4D(1, 16, 1, 1, bn1_bias),
                    Tensor4D(1, 16, 1, 1, bn1_running_mean),
                    Tensor4D(1, 16, 1, 1, bn1_running_var)
            );

            std::vector<float> fc1_weights = {0.011401f, -0.225430f, 0.207332f, 0.134611f, 0.248499f, 0.126303f,
                                              -0.165017f, 0.208646f, 0.013436f, 0.118554f, -0.200457f, -0.071907f,
                                              -0.245469f, -0.097373f, 0.053933f, -0.196290f, 0.079691f, 0.134202f,
                                              0.034827f, -0.167271f, -0.193830f, -0.077129f, 0.109740f, 0.246599f,
                                              0.143757f, -0.028152f, 0.087654f, -0.245266f, -0.213525f, 0.116652f,
                                              -0.141604f, 0.120274f, -0.176483f, -0.123828f, -0.205922f, 0.130460f,
                                              -0.025474f, 0.192400f, 0.154718f, 0.138336f, 0.008039f, -0.077294f,
                                              -0.054358f, 0.033225f, 0.123927f, -0.175147f, 0.209819f, -0.027183f,
                                              -0.209486f, -0.135264f, 0.221204f, 0.228632f, -0.231570f, 0.176325f,
                                              0.125290f, 0.147980f, 0.211632f, -0.134738f, 0.078944f, 0.102308f,
                                              -0.073873f, 0.083663f, -0.071928f, 0.154565f, -0.069364f, -0.093199f,
                                              0.062937f, 0.088673f, -0.122143f, 0.022100f, 0.144884f, -0.024874f,
                                              0.076083f, -0.060297f, 0.087625f, -0.181099f, -0.147007f, -0.126898f,
                                              0.229753f, -0.067271f, -0.000683f, -0.121124f, 0.249573f, 0.244168f,
                                              -0.188547f, -0.202667f, -0.189498f, -0.001206f, -0.063726f, -0.163636f,
                                              -0.089668f, 0.047233f, -0.130623f, 0.055396f, -0.057329f, -0.121141f,
                                              0.034346f, 0.205565f, -0.169020f, 0.011609f, -0.092192f, 0.245327f,
                                              -0.237191f, -0.239665f, 0.246346f, -0.158172f, 0.047931f, -0.021577f,
                                              -0.052664f, -0.055837f, 0.158860f, 0.011949f, -0.243404f, -0.147590f,
                                              -0.085225f, 0.125804f, -0.161783f, 0.235730f, -0.055682f, -0.044890f,
                                              0.195890f, 0.125652f, 0.212030f, 0.144611f, -0.075838f, -0.165868f,
                                              -0.018601f, 0.206909f, -0.083905f, -0.231842f, 0.102482f, 0.243368f,
                                              -0.071171f, -0.207006f, -0.226765f, 0.062650f, -0.018930f, -0.126247f,
                                              0.050533f, 0.094940f, 0.198830f, 0.194096f, -0.037421f, -0.220442f,
                                              -0.225906f, 0.233422f, 0.110514f, 0.108977f, -0.216305f, 0.231504f,
                                              0.236836f, 0.225715f, -0.210896f, -0.094331f, -0.171941f, 0.236741f,
                                              -0.107420f, -0.114139f, 0.130978f, -0.115648f, -0.123131f, -0.021868f,
                                              -0.024030f, -0.194745f, 0.208417f, -0.110280f, 0.088679f, 0.217446f,
                                              0.126079f, 0.035395f, 0.212714f, 0.033607f, -0.115664f, 0.236500f,
                                              0.059170f, -0.243920f, -0.071173f, -0.170292f, 0.219188f, -0.041286f,
                                              -0.227881f, -0.015716f, 0.157003f, 0.064950f, 0.079051f, 0.023218f,
                                              0.093205f, -0.060913f, -0.099450f, -0.233677f, -0.188334f, 0.108351f,
                                              -0.148028f, 0.035867f, 0.079798f, 0.017701f, -0.162087f, 0.239082f,
                                              -0.145375f, 0.205625f, -0.198877f, -0.060137f, 0.135992f, -0.102145f,
                                              0.210011f, -0.172039f, -0.209943f, -0.112730f, 0.040413f, 0.230189f,
                                              -0.119350f, 0.089407f, -0.062677f, -0.054216f, 0.183826f, -0.193746f,
                                              0.026553f, 0.235102f, -0.034353f, 0.194110f, -0.076989f, 0.201241f,
                                              -0.241833f, -0.036031f, -0.043912f, 0.081021f, 0.098082f, 0.191954f,
                                              -0.037246f, -0.009914f, 0.171203f, -0.067643f, 0.219158f, -0.166453f,
                                              -0.027052f, -0.013428f, 0.111552f, 0.170919f, -0.039626f, -0.207120f,
                                              0.123873f, 0.074783f, 0.100425f, -0.154217f, 0.160899f, 0.236789f,
                                              0.021693f, -0.233512f, 0.175497f, -0.185363f, 0.057468f, 0.036329f,
                                              -0.117009f, 0.087049f, -0.223608f, 0.056940f, -0.158488f, -0.027033f,
                                              0.032157f, 0.212986f, -0.119280f, 0.160159f, -0.031758f, -0.118732f,
                                              -0.217700f, -0.229380f, 0.244153f, -0.062350f, 0.012487f, 0.067778f,
                                              0.169933f, 0.213369f, 0.202754f, -0.185221f, -0.040054f, -0.147934f,
                                              -0.142838f, 0.059302f, 0.234662f, -0.200276f, 0.151301f, -0.129617f,
                                              -0.048694f, 0.198443f, -0.056543f, 0.022764f, -0.174758f, 0.212810f,
                                              -0.032317f, -0.182848f, 0.073203f, -0.177754f, -0.198377f, 0.015230f,
                                              0.198211f, -0.070746f, 0.117667f, 0.214830f, 0.165815f, -0.131140f,
                                              -0.027405f, -0.078671f, -0.201031f, 0.000103f, 0.188109f, 0.210629f,
                                              0.023325f, 0.056781f, -0.108230f, 0.188711f, -0.104027f, -0.173663f,
                                              0.038498f, 0.149846f, -0.225398f, 0.225992f, 0.089933f, -0.175153f,
                                              -0.053852f, 0.216895f, -0.191809f, -0.073069f, 0.081995f, -0.219021f,
                                              0.137050f, 0.130137f, 0.155051f, -0.159387f, 0.249000f, -0.148190f,
                                              0.249585f, -0.239923f, -0.222742f, 0.153549f, 0.026128f, 0.014422f,
                                              -0.138440f, -0.104869f, -0.073097f, -0.243539f, 0.012992f, 0.044215f,
                                              -0.000212f, 0.080733f, 0.237213f, 0.066471f, -0.091518f, -0.102887f,
                                              -0.159951f, -0.173305f, -0.040262f, -0.044216f, 0.111216f, -0.106859f,
                                              0.199301f, -0.175420f, 0.000711f, 0.224730f, 0.248596f, -0.144816f,
                                              0.044532f, 0.029531f, -0.117213f, -0.086374f, 0.067713f, -0.173841f,
                                              0.041249f, 0.108181f, -0.098518f, 0.207660f, -0.016453f, 0.113428f,
                                              0.247577f, -0.076417f, 0.135852f, -0.071507f, -0.036518f, -0.042368f,
                                              -0.001553f, -0.094442f, 0.058597f, 0.009420f, 0.158472f, -0.050601f,
                                              0.025070f, -0.092998f, -0.209363f, 0.101167f, 0.031989f, -0.100121f,
                                              -0.084526f, 0.065380f, -0.045204f, 0.163369f, 0.014161f, 0.094434f,
                                              0.108924f, -0.061342f, 0.108166f, 0.184483f, 0.011505f, 0.048923f,
                                              0.009084f, 0.173092f, -0.105549f, -0.132892f, 0.108938f, -0.217579f,
                                              0.004008f, -0.114973f, 0.165008f, -0.232760f, 0.151583f, 0.247339f,
                                              0.050585f, -0.016657f, 0.246087f, -0.106838f, -0.020033f, -0.109476f,
                                              -0.034510f, 0.054335f, 0.033390f, -0.047219f, -0.249960f, 0.012801f,
                                              -0.007405f, 0.037609f, 0.191563f, 0.243002f, -0.148321f, -0.015589f,
                                              -0.100168f, -0.230411f, -0.181915f, 0.234640f, 0.145765f, 0.134288f,
                                              0.138936f, -0.198620f, 0.026255f, 0.232679f, -0.139521f, 0.222399f,
                                              0.065710f, 0.175886f, -0.107097f, 0.115254f, -0.221622f, -0.015874f,
                                              0.083388f, 0.074974f, 0.209202f, 0.245664f, 0.227439f, 0.167848f,
                                              0.175766f, -0.032257f, -0.194012f, -0.092807f, -0.028066f, -0.135097f,
                                              0.127793f, 0.087757f, 0.040338f, 0.060390f, 0.219613f, 0.091058f,
                                              -0.219235f, -0.181470f, 0.110187f, 0.034070f, 0.121923f, -0.249680f,
                                              -0.230717f, 0.153307f, 0.159911f, -0.226178f, 0.094896f, -0.195211f,
                                              0.189327f, 0.078448f, 0.247197f, -0.246498f, -0.240669f, 0.169026f,
                                              0.221956f, 0.153170f, 0.166207f, -0.210568f, 0.180953f, -0.236037f,
                                              0.055850f, -0.163759f, -0.099299f, 0.044267f, -0.098295f, -0.039556f,
                                              -0.236956f, -0.235718f, 0.096841f, -0.105820f, -0.152097f, -0.098646f,
                                              -0.204392f, -0.199850f, 0.149593f, 0.127061f, 0.033301f, -0.136565f,
                                              0.083175f, 0.011231f};
            std::vector<float> fc1_bias = {-0.178668f, 0.053797f, 0.227636f, -0.245902f, -0.248598f, 0.032031f,
                                           0.188256f, -0.152122f, 0.055034f, 0.175746f, 0.077079f, 0.054103f, 0.249431f,
                                           0.162868f, -0.140607f, 0.021609f, 0.127718f, 0.220477f, -0.248733f,
                                           0.135376f, -0.072583f, -0.244805f, 0.055494f, -0.136103f, 0.035428f,
                                           -0.162312f, -0.188132f, -0.021213f, -0.083981f, 0.146216f, 0.021555f,
                                           0.195140f};
            fc1.set_weights(Tensor4D(1, 32, 16, 1, fc1_weights));
            fc1.set_bias(Tensor4D(1, 32, 1, 1, fc1_bias));

            std::vector<float> fc2_weights = {0.033128f, -0.056845f, 0.119737f, 0.009660f, 0.033180f, -0.056855f,
                                              0.000634f, -0.033989f, -0.015029f, -0.137864f, -0.001087f, -0.146732f,
                                              -0.038030f, 0.102450f, -0.122922f, -0.119157f, -0.043165f, -0.048461f,
                                              0.029926f, 0.029348f, 0.089643f, -0.121778f, -0.012475f, 0.098870f,
                                              0.152907f, -0.012895f, -0.102287f, 0.050817f, 0.100670f, -0.110441f,
                                              -0.102582f, 0.078135f, -0.012386f, -0.166965f, -0.101927f, 0.071689f,
                                              -0.059958f, 0.122016f, 0.139749f, 0.025716f, -0.013979f, -0.056114f,
                                              -0.008939f, 0.032177f, -0.135031f, -0.042249f, -0.147043f, 0.108498f,
                                              -0.112578f, 0.161493f, -0.045570f, -0.101271f, 0.084933f, 0.026354f,
                                              0.122410f, 0.073799f, -0.170296f, 0.111810f, -0.033289f, -0.078130f,
                                              0.112263f, 0.128929f, -0.155374f, -0.015985f, 0.145170f, 0.068463f,
                                              0.148929f, -0.060581f, -0.097518f, 0.152012f, 0.073685f, 0.169703f,
                                              -0.073839f, -0.113502f, -0.020721f, -0.166449f, 0.069292f, 0.130388f,
                                              0.042436f, -0.017467f, 0.087647f, -0.112209f, 0.172931f, -0.175777f,
                                              -0.169342f, -0.041773f, 0.144399f, 0.017700f, 0.067890f, -0.129579f,
                                              0.064468f, -0.019754f, 0.070856f, 0.124847f, 0.076841f, -0.015037f,
                                              -0.010889f, -0.110871f, -0.063940f, 0.114876f, -0.070887f, 0.109785f,
                                              -0.070098f, -0.041171f, 0.003762f, -0.162222f, -0.001765f, -0.017818f,
                                              -0.015881f, -0.035338f, 0.139367f, 0.130459f, -0.119812f, 0.082118f,
                                              -0.138661f, -0.150494f, 0.054037f, 0.002598f, -0.082467f, -0.170502f,
                                              -0.068437f, 0.059043f, -0.163625f, -0.171732f, 0.022428f, -0.127351f,
                                              -0.154871f, -0.068110f, -0.028461f, -0.160638f, -0.118039f, 0.011591f,
                                              -0.166695f, -0.024847f, -0.114145f, -0.122548f, 0.069479f, -0.136063f,
                                              -0.133967f, 0.100812f, 0.033051f, 0.160993f, -0.047252f, -0.085386f,
                                              -0.016360f, 0.000894f, 0.134818f, -0.176084f, -0.012587f, 0.078198f,
                                              -0.097348f, -0.089827f, 0.085430f, -0.169385f, 0.041888f, -0.136858f,
                                              0.087869f, -0.151151f, 0.108683f, -0.167343f, -0.148593f, 0.002605f,
                                              0.139298f, -0.151391f, -0.078853f, 0.155260f, -0.029645f, 0.073236f,
                                              -0.170059f, -0.055593f, -0.089773f, 0.149034f, 0.073369f, -0.128990f,
                                              0.028501f, -0.002032f, -0.072632f, -0.100953f, -0.058661f, 0.139340f,
                                              -0.126723f, -0.125926f, -0.054539f, 0.003075f, 0.048121f, 0.005305f,
                                              -0.042555f, -0.107189f, -0.031720f, -0.071162f, 0.142823f, -0.172076f,
                                              -0.112759f, -0.143824f, -0.032307f, 0.137757f, 0.154952f, -0.153894f,
                                              -0.007659f, 0.103762f, 0.077923f, 0.144798f, -0.004903f, -0.118775f,
                                              0.116943f, -0.060619f, 0.091533f, -0.043564f, 0.075147f, 0.158998f,
                                              0.164377f, -0.160878f, -0.116934f, -0.073091f, -0.112731f, 0.169617f,
                                              -0.015613f, -0.117263f, -0.078664f, -0.097645f, 0.072123f, -0.154194f,
                                              -0.164827f, -0.174260f, 0.076107f, 0.087408f, -0.109792f, 0.043837f,
                                              0.130494f, 0.025686f, -0.037403f, 0.013061f, -0.018955f, 0.089007f,
                                              -0.120033f, 0.089644f, 0.099636f, -0.107105f, 0.144349f, 0.173627f,
                                              -0.069690f, -0.049514f, 0.088098f, -0.138490f, 0.069908f, 0.041243f,
                                              0.111428f, -0.153549f, -0.146863f, 0.079396f, 0.063677f, -0.164538f,
                                              -0.098581f, -0.161747f, -0.126647f, -0.079762f, 0.146290f, -0.035188f,
                                              0.101532f, 0.167881f, 0.080563f, -0.158252f, 0.088958f, 0.067429f,
                                              0.137014f, -0.174379f, 0.108720f, 0.144699f, -0.164467f, 0.018495f,
                                              0.150910f, -0.128571f, 0.058004f, 0.078114f, 0.046331f, 0.175765f,
                                              0.144741f, 0.151666f, -0.022035f, 0.148265f, -0.164740f, -0.095394f,
                                              -0.037809f, -0.052513f, 0.163288f, 0.083379f, 0.113811f, 0.120245f,
                                              -0.132053f, -0.020474f, 0.025814f, 0.045978f, 0.090904f, -0.070341f,
                                              -0.053304f, 0.147916f, -0.047444f, -0.122796f, 0.119862f, 0.119705f,
                                              -0.055431f, -0.035341f, -0.130440f, -0.147625f, 0.066477f, -0.075518f,
                                              0.140731f, -0.141547f, -0.024435f, 0.003817f, 0.090854f, 0.143071f,
                                              0.119714f, 0.077816f, -0.081139f, -0.126245f, -0.158147f, 0.008769f,
                                              0.171452f, -0.033577f};
            std::vector<float> fc2_bias = {-0.007442f, -0.128463f, 0.054272f, 0.112073f, -0.174287f, -0.124472f,
                                           0.130940f, 0.041854f, -0.011021f, 0.031600f};
            fc2.set_weights(Tensor4D(1, 10, 32, 1, fc2_weights));
            fc2.set_bias(Tensor4D(1, 10, 1, 1, fc2_bias));

            std::vector<float> fc3_weights = {-0.026877f, -0.123561f, -0.165185f, 0.116267f, -0.021025f, -0.065653f,
                                              -0.045629f, -0.096418f, -0.052358f, -0.151748f, 0.132290f, 0.072185f,
                                              -0.089152f, -0.060336f, 0.079309f, -0.065461f, 0.046615f, 0.048674f,
                                              -0.111280f, 0.044283f, 0.010816f, 0.154394f, -0.063961f, -0.045444f,
                                              0.152311f, -0.144356f, 0.012772f, 0.170325f, -0.079261f, 0.169473f,
                                              0.156861f, 0.164462f};
            std::vector<float> fc3_bias = {-0.016869f};
            fc3.set_weights(Tensor4D(1, 1, 32, 1, fc3_weights));
            fc3.set_bias(Tensor4D(1, 1, 1, 1, fc3_bias));
        }

        std::pair<Tensor4D, Tensor4D> forward(const Tensor4D &x) {
            Tensor4D out = conv1.forward(x);
            out = bn1.forward(out);
            out = ReLULayer().forward(out);
            out = pool.forward(out);
            out = flatten.forward(out);
            out = fc1.forward(out);
            out = ReLULayer().forward(out);

            Tensor4D policy = fc2.forward(out);
            policy = softmax.forward(policy);

            Tensor4D value = fc3.forward(out);
            value = Tanh().forward(value);

            return {policy, value};
        }
    };

} // namespace nnm

