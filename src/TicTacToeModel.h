
#pragma once

#include "ConvolutionalLayer.h"
#include "BatchNorm2d.h"
#include "MaxPoolingLayer.h"
#include "FlattenLayer.h"
#include "LinearLayer.h"
#include "ReLULayer.h"
#include "Tanh.h"
#include "Tensor4D.h"
#include <vector>
#include "SoftMaxLayer.h"

namespace nnm {

    class TicTacToeModel {
    private:
        ConvolutionalLayer conv1;
        BatchNorm2d bn1;
        MaxPoolingLayer pool;
        Flatten flatten;
        LinearLayer fc1;
        LinearLayer fc2;
        LinearLayer fc3;
        SoftMaxLayer softmax;

    public:
        TicTacToeModel() :
                conv1(3, 16, 3, 1, 1),
                bn1(16),
                pool(2, 2, 2),
                flatten(),
                fc1(16 * 1 * 1, 32),
                fc2(32, 10),
                fc3(32, 1), softmax(1) {
            // Initialize weights and biases
            std::vector<float> conv1_weights = {0.091810f, -0.081619f, -0.035217f, 0.051376f, -0.167802f, 0.005434f,
                                                0.091802f, 0.024114f, -0.017707f, 0.123727f, 0.083713f, -0.171087f,
                                                0.113259f, -0.151791f, 0.108104f, 0.162052f, 0.017736f, -0.065043f,
                                                -0.099409f, -0.085455f, -0.035475f, -0.079786f, 0.191048f, -0.083012f,
                                                0.079903f, -0.178464f, 0.097544f, 0.163758f, -0.137961f, -0.049102f,
                                                0.045868f, -0.184218f, -0.121767f, 0.066931f, 0.181220f, -0.057493f,
                                                -0.001753f, -0.185779f, -0.184723f, 0.167370f, 0.163315f, -0.058653f,
                                                -0.076098f, -0.012458f, 0.089295f, -0.185982f, -0.106602f, -0.063445f,
                                                -0.083766f, -0.005084f, 0.140375f, 0.042019f, -0.174164f, 0.177994f,
                                                0.154959f, 0.060594f, 0.094201f, 0.071943f, 0.157744f, -0.185098f,
                                                -0.119803f, -0.024440f, -0.036608f, -0.127812f, -0.184559f, -0.146979f,
                                                -0.029890f, 0.163366f, 0.127591f, 0.055472f, -0.118200f, -0.077422f,
                                                0.018540f, -0.178383f, -0.008785f, 0.039135f, 0.173992f, -0.050518f,
                                                0.188905f, 0.014519f, -0.133519f, 0.181889f, 0.166850f, -0.152066f,
                                                -0.111639f, 0.092020f, -0.118416f, 0.130857f, -0.091824f, -0.059730f,
                                                -0.055246f, 0.183604f, -0.065079f, -0.037421f, 0.116447f, -0.131673f,
                                                -0.000927f, -0.148653f, -0.177627f, -0.043939f, 0.021275f, 0.164115f,
                                                -0.184558f, -0.055377f, 0.050645f, 0.072671f, 0.112440f, -0.154747f,
                                                -0.047049f, 0.044500f, -0.154269f, 0.096978f, -0.183630f, 0.120086f,
                                                0.062568f, -0.054665f, 0.062435f, 0.163001f, 0.141574f, 0.116731f,
                                                -0.112031f, 0.055302f, 0.144423f, 0.033943f, 0.127415f, -0.119354f,
                                                0.135264f, -0.006384f, -0.172664f, -0.049888f, 0.170096f, -0.067231f,
                                                -0.033332f, -0.076987f, -0.104640f, 0.033341f, 0.116747f, 0.022756f,
                                                -0.011870f, 0.011133f, -0.144316f, -0.101402f, 0.009630f, -0.153824f,
                                                0.095321f, 0.029333f, 0.002026f, -0.012350f, 0.162543f, 0.175635f,
                                                0.093968f, 0.095584f, -0.093315f, 0.078671f, -0.130167f, 0.083172f,
                                                -0.136655f, -0.001053f, 0.139485f, 0.127793f, 0.170165f, 0.065649f,
                                                0.074705f, 0.051609f, 0.140530f, 0.100989f, 0.056786f, -0.067149f,
                                                -0.093139f, -0.047581f, 0.091845f, -0.104759f, 0.052579f, 0.168375f,
                                                0.162957f, -0.141691f, 0.054855f, 0.125838f, -0.174807f, 0.122998f,
                                                -0.119914f, -0.139151f, -0.081578f, -0.072387f, -0.079567f, 0.055406f,
                                                0.074555f, 0.074795f, 0.132873f, -0.121765f, -0.182737f, -0.154389f,
                                                -0.105775f, -0.088028f, 0.084565f, -0.139269f, -0.140708f, 0.103063f,
                                                -0.122454f, 0.036096f, -0.146741f, 0.073430f, 0.120256f, -0.161879f,
                                                0.065463f, -0.100896f, 0.122136f, 0.173091f, -0.162355f, 0.071986f,
                                                0.129970f, 0.174970f, 0.145349f, 0.037849f, 0.011251f, 0.039652f,
                                                -0.114735f, -0.037707f, -0.002968f, -0.121780f, -0.008533f, -0.025566f,
                                                -0.067374f, -0.059109f, -0.191666f, 0.183404f, 0.094859f, 0.139135f,
                                                -0.163821f, -0.188410f, 0.143118f, -0.033795f, 0.029999f, 0.096502f,
                                                0.012298f, -0.006374f, 0.114354f, 0.153745f, -0.053631f, -0.164306f,
                                                -0.105528f, 0.137530f, 0.016735f, 0.164784f, -0.067322f, -0.182351f,
                                                0.059764f, -0.082010f, -0.115058f, 0.119981f, 0.013383f, -0.016433f,
                                                0.187421f, 0.167650f, -0.157217f, -0.176911f, -0.095167f, -0.149422f,
                                                -0.101164f, 0.129837f, -0.128056f, 0.176506f, 0.060045f, 0.008359f,
                                                0.032919f, 0.040621f, 0.061922f, -0.156519f, -0.003347f, 0.127668f,
                                                0.191200f, -0.010181f, -0.137480f, 0.088446f, -0.176082f, 0.171536f,
                                                0.118283f, 0.086682f, 0.026288f, 0.139898f, -0.077742f, -0.160520f,
                                                -0.106384f, 0.143210f, -0.096184f, -0.153454f, 0.042154f, -0.119546f,
                                                -0.008146f, -0.122151f, 0.040662f, -0.031418f, 0.025392f, 0.088958f,
                                                -0.123918f, -0.065615f, -0.128330f, 0.160260f, -0.068906f, 0.072476f,
                                                0.044415f, -0.189868f, -0.136624f, -0.049460f, -0.147534f, 0.102047f,
                                                0.120974f, -0.000353f, 0.023565f, 0.050715f, 0.064008f, -0.037224f,
                                                -0.075726f, -0.118997f, 0.007663f, 0.152180f, -0.023922f, 0.165594f,
                                                0.067317f, -0.099022f, 0.074752f, 0.077087f, -0.085651f, -0.033733f,
                                                -0.019987f, 0.067936f, 0.150168f, -0.042326f, 0.125144f, 0.103768f,
                                                -0.166754f, 0.140690f, -0.007795f, 0.148543f, 0.149906f, -0.186358f,
                                                -0.160274f, -0.021907f, 0.061842f, -0.030628f, -0.185275f, 0.104684f,
                                                -0.110048f, 0.087368f, 0.135934f, -0.064911f, 0.115902f, 0.025592f,
                                                -0.060417f, 0.012484f, 0.069206f, 0.098512f, -0.110432f, 0.143847f,
                                                -0.091021f, -0.165782f, -0.083195f, -0.170380f, 0.053886f, 0.012956f,
                                                -0.009372f, -0.130248f, 0.101452f, 0.031517f, -0.048300f, 0.034097f,
                                                0.067875f, -0.115623f, -0.055430f, -0.087395f, 0.170333f, 0.047587f,
                                                -0.145240f, 0.135914f, -0.030558f, 0.013246f, 0.024900f, -0.022477f,
                                                0.182191f, 0.083364f, 0.041435f, -0.069967f, 0.044294f, -0.140125f,
                                                -0.066538f, 0.097581f, -0.189410f, -0.004842f, -0.070930f, 0.098322f,
                                                -0.120213f, 0.033310f, -0.055482f, 0.161454f, -0.028716f, -0.140537f,
                                                -0.059789f, 0.135669f, 0.073682f, 0.041205f, 0.120005f, 0.074318f,
                                                -0.024675f, -0.101929f, -0.184167f, 0.092551f, 0.150084f, -0.073555f,
                                                -0.086499f, 0.033181f, -0.017781f, 0.147767f, -0.003332f, -0.005797f,
                                                -0.178918f, 0.058740f, 0.000669f, 0.045402f, 0.117660f, 0.081873f,
                                                0.000367f, -0.014828f, -0.097204f, 0.173789f, 0.160185f, -0.000780f,
                                                0.192225f, 0.168995f, 0.110641f, 0.098927f, 0.076191f, -0.033759f};
            std::vector<float> conv1_bias = {0.019125f, 0.156568f, -0.032427f, 0.060061f, -0.062109f, 0.031582f,
                                             0.111772f, 0.119691f, 0.094170f, 0.091575f, -0.046200f, 0.175243f,
                                             0.135215f, 0.182188f, -0.155603f, -0.087208f};
            conv1.set_weights(Tensor4D(16, 3, 3, 3, conv1_weights));
            conv1.set_bias(Tensor4D(1, 16, 1, 1, conv1_bias));

            std::vector<float> bn1_weight = {1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f,
                                             1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f,
                                             1.000000f, 1.000000f, 1.000000f, 1.000000f};
            std::vector<float> bn1_bias = {0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
                                           0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
                                           0.000000f, 0.000000f};
            std::vector<float> bn1_running_mean = {0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
                                                   0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
                                                   0.000000f, 0.000000f, 0.000000f, 0.000000f};
            std::vector<float> bn1_running_var = {1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f,
                                                  1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f, 1.000000f,
                                                  1.000000f, 1.000000f, 1.000000f, 1.000000f};
            bn1.set_parameters(
                    Tensor4D(1, 16, 1, 1, bn1_weight),
                    Tensor4D(1, 16, 1, 1, bn1_bias),
                    Tensor4D(1, 16, 1, 1, bn1_running_mean),
                    Tensor4D(1, 16, 1, 1, bn1_running_var)
            );

            std::vector<float> fc1_weights = {-0.207588f, 0.022146f, 0.191023f, -0.170867f, 0.065428f, -0.005002f,
                                              -0.232763f, -0.009817f, -0.029353f, -0.121253f, -0.156016f, 0.147798f,
                                              -0.025655f, -0.049549f, -0.069506f, -0.031965f, -0.068956f, -0.149770f,
                                              0.106665f, -0.003696f, -0.223564f, -0.125540f, -0.051004f, -0.095354f,
                                              0.058976f, 0.233881f, -0.180432f, -0.003668f, 0.217223f, -0.145727f,
                                              -0.195123f, 0.066681f, -0.002913f, -0.003270f, 0.157064f, -0.213914f,
                                              -0.149567f, 0.173511f, -0.175513f, -0.033564f, 0.116067f, -0.136527f,
                                              -0.193866f, -0.149294f, -0.186041f, -0.214234f, -0.040971f, -0.232062f,
                                              -0.152058f, 0.018450f, 0.232797f, 0.246510f, 0.208968f, 0.027677f,
                                              0.155662f, -0.078162f, -0.160733f, 0.125463f, 0.098625f, 0.087997f,
                                              0.116334f, -0.062821f, 0.183909f, 0.136247f, -0.108775f, 0.183731f,
                                              0.090095f, 0.008521f, 0.003755f, 0.214878f, 0.008122f, 0.087919f,
                                              0.182441f, 0.013513f, 0.226480f, -0.147983f, -0.024426f, 0.020216f,
                                              0.013557f, -0.181719f, 0.238570f, -0.140283f, 0.180443f, -0.099734f,
                                              0.099404f, -0.137751f, -0.108874f, 0.065911f, 0.171914f, -0.020092f,
                                              0.093754f, -0.137901f, 0.079026f, -0.028089f, -0.056960f, 0.123089f,
                                              -0.082986f, -0.152681f, -0.070914f, 0.124674f, 0.239331f, 0.225994f,
                                              0.174634f, -0.154283f, 0.223255f, 0.101775f, 0.044435f, -0.144929f,
                                              -0.132823f, 0.064495f, -0.022166f, -0.070626f, -0.190832f, 0.213086f,
                                              0.077396f, 0.032849f, 0.023488f, 0.134527f, -0.150762f, -0.009983f,
                                              0.220663f, -0.038807f, -0.214055f, -0.149139f, 0.154992f, 0.131655f,
                                              0.172554f, -0.088355f, -0.116238f, -0.221019f, 0.017248f, -0.054038f,
                                              0.237199f, -0.112626f, -0.158857f, 0.101384f, -0.091215f, -0.023210f,
                                              0.249397f, 0.155930f, -0.249172f, 0.012057f, 0.007868f, 0.244501f,
                                              -0.216137f, 0.153901f, -0.245480f, -0.245761f, -0.128152f, -0.239109f,
                                              -0.015380f, 0.201883f, -0.069356f, -0.189591f, -0.021507f, -0.203476f,
                                              0.169608f, 0.036145f, 0.221723f, 0.106055f, 0.089392f, 0.084239f,
                                              0.232217f, -0.156394f, -0.152879f, 0.192267f, 0.090729f, 0.229249f,
                                              0.058269f, 0.090512f, 0.154080f, 0.162896f, 0.137179f, -0.196051f,
                                              0.072368f, -0.171085f, 0.032270f, 0.136860f, -0.083561f, 0.216904f,
                                              0.222589f, 0.071973f, -0.180855f, 0.005218f, 0.194520f, 0.044903f,
                                              0.217792f, 0.018091f, -0.115782f, 0.163140f, 0.082731f, 0.138030f,
                                              -0.149379f, -0.189556f, 0.167443f, 0.087458f, 0.182900f, -0.208434f,
                                              -0.115038f, -0.007922f, -0.129847f, 0.156190f, 0.198554f, 0.216687f,
                                              0.035106f, -0.227021f, -0.089672f, 0.057999f, -0.067469f, 0.106767f,
                                              -0.066809f, 0.206582f, 0.216557f, 0.247708f, 0.082796f, -0.169242f,
                                              -0.064703f, -0.133415f, 0.112446f, -0.021934f, 0.100098f, 0.072568f,
                                              -0.076731f, 0.034636f, -0.038398f, 0.043284f, -0.165499f, 0.004628f,
                                              0.190559f, 0.129345f, -0.155287f, 0.208583f, -0.095579f, 0.223451f,
                                              -0.050975f, 0.241161f, 0.147017f, -0.020666f, 0.168442f, 0.212343f,
                                              -0.195541f, 0.044939f, 0.171138f, -0.025888f, 0.158241f, 0.195009f,
                                              -0.198280f, 0.136314f, -0.229705f, 0.156527f, -0.138236f, -0.077810f,
                                              0.061141f, -0.215271f, -0.008618f, -0.087463f, 0.079099f, -0.014818f,
                                              -0.227195f, -0.061723f, 0.038994f, 0.136887f, -0.142729f, -0.151993f,
                                              0.112630f, -0.150066f, -0.098814f, -0.249878f, -0.060225f, -0.199345f,
                                              0.039167f, 0.202450f, 0.111023f, -0.208419f, 0.224101f, -0.223415f,
                                              -0.095923f, 0.140261f, 0.118625f, 0.137773f, -0.059494f, -0.218933f,
                                              -0.244777f, 0.020485f, -0.241858f, -0.164798f, 0.163374f, -0.038487f,
                                              0.087255f, -0.196678f, 0.039628f, 0.225271f, 0.045450f, 0.044097f,
                                              -0.154277f, -0.180763f, 0.145741f, -0.223820f, -0.015315f, -0.200321f,
                                              0.017571f, -0.244972f, 0.082763f, 0.000425f, -0.164392f, -0.093087f,
                                              -0.099905f, -0.112222f, -0.062342f, 0.046061f, -0.143842f, 0.063094f,
                                              -0.206005f, 0.235435f, -0.149840f, 0.106306f, -0.171123f, -0.170639f,
                                              -0.036696f, -0.142417f, -0.069946f, -0.108744f, -0.069917f, -0.193261f,
                                              0.243823f, 0.141001f, -0.089309f, 0.181543f, -0.111383f, -0.204226f,
                                              0.080075f, -0.086028f, 0.188020f, -0.067274f, -0.203550f, 0.210806f,
                                              0.056116f, 0.075874f, -0.024178f, -0.198786f, 0.080482f, 0.000675f,
                                              -0.165522f, 0.142466f, -0.234104f, -0.155157f, -0.058291f, -0.234329f,
                                              -0.225063f, -0.075109f, -0.047127f, 0.183388f, 0.116662f, 0.232443f,
                                              0.077654f, 0.033435f, -0.048178f, -0.105466f, -0.223963f, -0.228347f,
                                              0.106374f, -0.158245f, -0.102556f, 0.116833f, -0.154542f, 0.092432f,
                                              -0.013834f, 0.051587f, -0.113880f, 0.182290f, -0.204482f, -0.233394f,
                                              0.195054f, -0.168900f, 0.239987f, 0.111042f, 0.096487f, -0.030959f,
                                              0.047024f, 0.064111f, -0.117559f, 0.184015f, 0.153655f, 0.014699f,
                                              0.071681f, -0.030343f, -0.090302f, -0.192706f, -0.096040f, -0.239413f,
                                              -0.078619f, 0.130798f, 0.242562f, -0.228767f, -0.207823f, 0.206342f,
                                              -0.088245f, 0.000338f, 0.156868f, 0.221440f, 0.094677f, 0.061926f,
                                              -0.006028f, 0.006300f, 0.100875f, -0.235165f, -0.242013f, 0.168571f,
                                              -0.244719f, 0.131377f, 0.180958f, 0.165785f, 0.076254f, 0.027776f,
                                              0.115456f, 0.148973f, 0.007872f, -0.179885f, 0.155539f, 0.027850f,
                                              0.150598f, -0.167535f, -0.062493f, -0.160600f, 0.014319f, 0.212449f,
                                              0.047518f, 0.212509f, 0.183684f, -0.171955f, 0.239982f, 0.013886f,
                                              0.209321f, 0.048410f, -0.042685f, 0.212232f, -0.184983f, 0.005608f,
                                              -0.035020f, 0.011296f, -0.071725f, 0.198489f, -0.013067f, 0.103300f,
                                              0.107658f, 0.227785f, 0.089894f, -0.249216f, -0.207256f, -0.236192f,
                                              -0.245094f, -0.208002f, -0.003644f, 0.236612f, -0.161801f, 0.105176f,
                                              -0.114068f, 0.193671f, 0.162594f, 0.116160f, 0.220242f, -0.188558f,
                                              -0.212284f, -0.127724f, 0.050669f, 0.221013f, 0.165060f, 0.078144f,
                                              -0.044382f, -0.141946f, 0.248627f, -0.218826f, -0.172452f, 0.147128f,
                                              0.195027f, 0.065706f, -0.004368f, -0.029703f, 0.032562f, -0.125788f,
                                              0.247163f, 0.249682f, -0.096751f, 0.173576f, -0.059422f, -0.181352f,
                                              0.042921f, -0.047780f, 0.207898f, 0.017325f, -0.054835f, -0.198590f,
                                              0.163548f, 0.166859f, 0.035163f, -0.021902f, -0.083755f, 0.057947f,
                                              0.239913f, -0.041189f, 0.022810f, -0.238185f, 0.063823f, -0.107113f,
                                              -0.059274f, -0.132582f, 0.231517f, 0.170238f, -0.107661f, -0.061315f,
                                              0.076147f, 0.094077f};
            std::vector<float> fc1_bias = {-0.117697f, 0.101530f, 0.039750f, 0.143661f, -0.135097f, -0.161421f,
                                           0.116238f, -0.009755f, -0.108940f, 0.196215f, -0.027810f, -0.166960f,
                                           -0.035682f, -0.115826f, -0.086341f, -0.205806f, 0.199561f, 0.219974f,
                                           -0.210899f, 0.156391f, 0.073072f, -0.101378f, -0.073324f, 0.042616f,
                                           0.053037f, 0.212249f, 0.238887f, 0.014428f, 0.235158f, -0.147855f, 0.002116f,
                                           -0.206475f};
            fc1.set_weights(Tensor4D(1, 32, 16, 1, fc1_weights));
            fc1.set_bias(Tensor4D(1, 32, 1, 1, fc1_bias));

            std::vector<float> fc2_weights = {0.084682f, 0.035258f, -0.107083f, -0.134887f, -0.035101f, -0.066768f,
                                              -0.072039f, -0.153962f, -0.112631f, 0.146721f, -0.086944f, 0.071954f,
                                              0.012040f, -0.024129f, 0.057832f, 0.133113f, 0.055083f, 0.019164f,
                                              0.143494f, 0.014628f, 0.038856f, 0.172360f, -0.127975f, 0.128426f,
                                              -0.084920f, -0.009080f, -0.102306f, 0.116644f, -0.142182f, -0.078317f,
                                              0.030544f, -0.067655f, 0.018995f, 0.162323f, -0.156358f, -0.114864f,
                                              -0.137466f, 0.169042f, 0.042903f, -0.127723f, -0.153741f, 0.131018f,
                                              0.162344f, -0.106971f, 0.045244f, -0.043886f, 0.104845f, -0.098920f,
                                              0.120731f, 0.176506f, 0.107060f, -0.030246f, 0.023120f, 0.076276f,
                                              -0.101916f, -0.082355f, -0.172928f, 0.124863f, -0.082137f, 0.151886f,
                                              -0.034673f, -0.065314f, 0.090004f, -0.017196f, -0.119845f, 0.018989f,
                                              -0.082314f, -0.127930f, -0.111538f, 0.061354f, 0.014878f, -0.071647f,
                                              0.063101f, -0.055337f, -0.136438f, 0.060711f, -0.060198f, -0.052383f,
                                              0.127066f, 0.132133f, -0.173027f, 0.151613f, 0.158090f, -0.127476f,
                                              -0.176247f, -0.137998f, -0.046931f, -0.007948f, 0.048720f, 0.042161f,
                                              0.034248f, -0.138007f, 0.170145f, 0.152280f, 0.086127f, 0.038611f,
                                              -0.098712f, 0.012918f, -0.126154f, 0.162481f, -0.156996f, 0.150456f,
                                              0.166432f, -0.085580f, -0.157741f, 0.062364f, -0.135677f, -0.163100f,
                                              -0.106501f, 0.124967f, -0.110800f, -0.070749f, -0.071693f, 0.125641f,
                                              0.068496f, 0.101328f, -0.033025f, -0.104527f, 0.063712f, 0.071323f,
                                              0.146319f, -0.165645f, -0.129714f, 0.115981f, 0.045726f, 0.117361f,
                                              -0.044702f, 0.176268f, 0.069086f, -0.068423f, -0.085401f, 0.046444f,
                                              -0.004353f, -0.085676f, -0.094753f, 0.059564f, 0.087262f, 0.168362f,
                                              -0.074598f, -0.104364f, -0.111443f, -0.119751f, 0.174622f, -0.086452f,
                                              -0.083157f, 0.129691f, 0.140576f, -0.161785f, -0.019486f, 0.053120f,
                                              0.027035f, -0.100502f, -0.142456f, -0.127559f, 0.058883f, -0.082301f,
                                              -0.160739f, 0.174284f, 0.081004f, -0.052740f, 0.028208f, -0.062822f,
                                              -0.116533f, -0.163327f, 0.115233f, -0.163246f, -0.133338f, 0.147510f,
                                              -0.111332f, -0.059353f, 0.000816f, -0.174570f, -0.160506f, -0.143393f,
                                              -0.026648f, -0.063978f, 0.131288f, 0.113715f, 0.171987f, -0.152964f,
                                              -0.084230f, 0.120422f, 0.061282f, -0.115152f, 0.132539f, -0.090287f,
                                              0.167856f, -0.141091f, 0.091629f, -0.010050f, -0.153014f, 0.091469f,
                                              -0.064879f, 0.003076f, -0.053970f, -0.039517f, -0.045243f, 0.079362f,
                                              -0.014278f, 0.120781f, 0.071407f, -0.001044f, 0.070871f, -0.059467f,
                                              -0.136223f, -0.116442f, -0.121054f, -0.142704f, 0.028285f, -0.015729f,
                                              -0.158956f, 0.091727f, 0.109545f, 0.150168f, 0.007249f, -0.012942f,
                                              0.103974f, -0.153303f, 0.010928f, 0.115678f, 0.122339f, 0.020830f,
                                              -0.014660f, 0.063168f, 0.037579f, -0.005935f, 0.140023f, 0.150903f,
                                              -0.100424f, 0.159091f, -0.046149f, 0.038032f, 0.157444f, -0.083533f,
                                              0.082512f, -0.024103f, -0.100034f, -0.010762f, 0.151112f, 0.098650f,
                                              -0.091418f, 0.160014f, 0.035963f, 0.150886f, 0.168145f, -0.051465f,
                                              0.141131f, -0.026204f, 0.027905f, 0.005751f, 0.002433f, -0.013717f,
                                              -0.162032f, 0.015381f, 0.162209f, 0.057982f, -0.163341f, 0.033001f,
                                              -0.028634f, 0.052109f, -0.162344f, 0.029551f, -0.126338f, 0.025153f,
                                              0.106397f, 0.123759f, -0.029214f, 0.157031f, -0.010398f, -0.101743f,
                                              0.082626f, 0.007656f, -0.139474f, 0.112396f, 0.170363f, 0.096798f,
                                              -0.028149f, -0.148310f, 0.151447f, -0.094149f, 0.026628f, -0.159951f,
                                              0.109051f, 0.035491f, 0.168288f, 0.085788f, -0.168829f, 0.139692f,
                                              -0.142855f, -0.084489f, 0.091273f, -0.096210f, 0.046355f, 0.018207f,
                                              0.012523f, -0.096015f, 0.123718f, 0.025411f, 0.065632f, 0.020583f,
                                              -0.087941f, -0.066444f, 0.117673f, -0.154431f, -0.061097f, -0.161819f,
                                              -0.105683f, 0.023757f, -0.040272f, 0.058909f, 0.134699f, 0.037183f,
                                              0.167891f, -0.000467f, 0.170545f, 0.028520f, -0.004537f, 0.049407f,
                                              -0.139383f, 0.144156f};
            std::vector<float> fc2_bias = {0.161749f, -0.155469f, -0.105210f, 0.139714f, 0.044434f, -0.063909f,
                                           -0.088078f, -0.040504f, -0.033273f, 0.163074f};
            fc2.set_weights(Tensor4D(1, 10, 32, 1, fc2_weights));
            fc2.set_bias(Tensor4D(1, 10, 1, 1, fc2_bias));

            std::vector<float> fc3_weights = {-0.107484f, 0.024861f, 0.050106f, -0.087686f, -0.011022f, -0.031958f,
                                              0.134879f, 0.126481f, -0.008529f, -0.090591f, -0.101489f, -0.075262f,
                                              0.153355f, 0.143703f, 0.035151f, -0.164707f, 0.056454f, -0.032855f,
                                              0.098838f, 0.091882f, 0.148303f, 0.012873f, 0.013529f, 0.001281f,
                                              0.122129f, 0.133483f, 0.083292f, -0.035348f, -0.051321f, 0.163817f,
                                              -0.091445f, 0.030407f};
            std::vector<float> fc3_bias = {0.055580f};
            fc3.set_weights(Tensor4D(1, 1, 32, 1, fc3_weights));
            fc3.set_bias(Tensor4D(1, 1, 1, 1, fc3_bias));
        }

        std::pair<Tensor4D, Tensor4D> forward(const Tensor4D &x) {
            Tensor4D out = conv1.forward(x);
            out = bn1.forward(out);
            out = ReLULayer().forward(out);
            out = pool.forward(out);
            out = flatten.forward(out);
            out = fc1.forward(out);
            out = ReLULayer().forward(out);

            Tensor4D policy = fc2.forward(out);
            policy.print();
            policy = softmax.forward(out);
            policy.print();

            Tensor4D value = fc3.forward(out);
            value = Tanh().forward(value);

            return {policy, value};
        }
    };

} // namespace nnm


